(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    238900,       5153]
NotebookOptionsPosition[    233327,       4981]
NotebookOutlinePosition[    233792,       4999]
CellTagsIndexPosition[    233749,       4996]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["1. Basic functions in mathStatica:", "mathStatica"]], \
"Text"],

Cell[BoxData[
 FormBox[
  StyleBox[
   FrameBox[
    RowBox[{"  ", 
     StyleBox[GridBox[{
        {"\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"function\\\\\\\"\\\", \
\\\"SO10\\\"]\\) \"\>", \
"\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"description\\\\\\\"\\\", \\\"SO10\\\"]\\) \
\"\>"},
        {
         RowBox[{
          RowBox[{
           StyleBox["PlotDensity",
            FontFamily->"Courier"], 
           StyleBox["[",
            FontFamily->"Courier"], 
           StyleBox[" ",
            FontSlant->"Italic"], 
           StyleBox["f",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontSlant->"Italic"], 
           StyleBox["]",
            FontFamily->"Courier"]}], "       "}], 
         RowBox[{"Plotting", " ", 
          RowBox[{"(", "automated", ")"}]}]},
        {
         RowBox[{
          RowBox[{
           StyleBox["Expect",
            FontFamily->"Courier"], 
           StyleBox["[",
            FontFamily->"Courier"], 
           RowBox[{
            StyleBox["x",
             FontSlant->"Italic"], ",", 
            StyleBox["f",
             FontSlant->"Italic"]}], 
           StyleBox[" ",
            FontSlant->"Italic"], 
           StyleBox["]",
            FontFamily->"Courier"]}], " "}], 
         RowBox[{"Expectation", " ", "operator", 
          FormBox[
           RowBox[{"        ", 
            RowBox[{"E", "[", "X", "]"}]}],
           TraditionalForm], " "}]},
        {
         RowBox[{
          StyleBox["Prob",
           FontFamily->"Courier"], 
          StyleBox["[",
           FontFamily->"Courier"], 
          RowBox[{
           StyleBox["x",
            FontSlant->"Italic"], ",", 
           StyleBox["f",
            FontSlant->"Italic"]}], 
          StyleBox["]",
           FontFamily->"Courier"]}], 
         RowBox[{"Probability", "       \t      ", 
          RowBox[{"P", "(", 
           RowBox[{"X", "\[LessEqual]", "x"}], ")"}]}]},
        {
         RowBox[{
          RowBox[{
           StyleBox["Transform",
            FontFamily->"Courier"], 
           StyleBox["[",
            FontFamily->"Courier"], 
           RowBox[{
            StyleBox["eqn",
             FontSlant->"Italic"], ",", 
            StyleBox["f",
             FontSlant->"Italic"]}], 
           StyleBox[" ",
            FontSlant->"Italic"], 
           StyleBox["]",
            FontFamily->"Courier"]}], 
          StyleBox["      ",
           FontFamily->"Courier"]}], "Transformations"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}}],
      GridBoxOptions->{
      GridBoxDividers->{
       "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}}}], 
     StyleBox[" ",
      GridBoxOptions->{
      GridBoxDividers->{
       "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}}}]}]],
   Background->RGBColor[1, 1, 0.900008]], TraditionalForm]], "Text",
 TextAlignment->Center,
 ShowStringCharacters->False],

Cell[TextData[{
 StyleBox["Here:  ",
  FontWeight->"Bold"],
 "random variable ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 " with density ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]]],
 ". Note: \"density\" could be also discrete. Example:"
}], "TableLabel",
 CellChangeTimes->{{3.49171546453125*^9, 3.491715466125*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", " ", "=", 
   FractionBox["1", 
    RowBox[{"\[Pi]", " ", 
     SqrtBox[
      RowBox[{"1", "-", "x"}]], " ", 
     SqrtBox["x"]}]]}], ";", "           ", 
  RowBox[{
   RowBox[{"domain", "[", "f", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotDensity", "[", "f", "]"}]], "Input",
 CellChangeTimes->{3.4601571228125*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwd2nc01f8fB3CjkEREIkJGEpFK0Xh+QkU0lELDVkhWKjQ0ECUasqIICaEQ
EYWMMqIyMu/FNe+yR5Lf5/v7597zOPczzuf9fn1e45wrZ+t21IGLg4ODID/+
+z7gMPijZOj4bi/RmqQTjgnEIj1Jd4rEFmjM9ZiGq2kSm19ExeZI6KNf2H/X
vrz1BE1K4dYVpUP45/TVQndBgTCqa8mOkzDFgf4fGc3qawmFEOnkBRkLyNNP
3JzQlyX+HrCLtFGyRGTg662H30sTw/6N5TYRNrjzYZvdzturCTP76eLHEvaI
nt5Y41IkQZTrSeZ/iT0Lo0Sr1Kf6qwgN+V1vJ2SckLQ0XzyLR5yI5bJOVUw8
j4wedVmdSTGCr+f2yxNKruDW+pP+iUeMKKT+rPti6o7pF0d5rbaIEu5H7A+c
jvCAzNqhS/PeKwilksnKiRZP6PnhZE6DCNGpflfvgYQXgqUvbfPeLkKEv1hV
onjqEr471030ZQgTB4TSdn6KvYzi7xWvhdSFCQ6/HQUnuq4gWOLydfvC5UQe
q3YrW8YHs6fb3sUcWk64WFpm37XxRY1apgXRJESs/c7eKJt4FZ3vRdnSq4WI
0AwRZROlG+i9ffznpeplxF7ppKShc35QzhMNvbtpGXGjMmZ5qelNgCkrG5Qg
QGzRUn1gEXELhy6eN5CIXkoIsbxqFLfdhqn2mc4DMkuJ4eTiJWMtt7FSxCsm
OZ2fiBc7HHhPwh/We/PcexuXEFfrIstPFPpjr0uwM8t9CXEigMolfyoAW06s
+OgqvIQQmPTw+xgbiL3BUkWhlnzEwJvC4ru77sLxq/CuBH4+osye+++xrrs4
/+Fdt0AhL+HdGO7NkAkGj5fqSvG1vMSxkM68DyXBsA+1FDjexkNs1Fea9Le5
B3mjk6Prn/IQtJx8D+nE+ziufsKVQ4SHMHnS5nxIKRTTchHsRoXFhKqRfKpk
VSiWCr9iKbIWEXzcLgP958LQ2uS2V6ZgEWFV8O/dZ9OH+GMXnv3h2CJCbP3D
jeYRj2BtX+ceFs1NcAXkHvzU/wjqX15Uy7pyEyPU3y4K2x7jssP9skY9bqIm
Si59pOUxgi+Jll4c4yJu8eWsC5YIh/qfY8qWp7gIlf2PgrLdw+E5V9HRtoWL
+BngNtReFY6UC9eSjIW4CAVu1fSNl5/iTXaQ/mAlJ1E5n7Sx8WcE9FM1HvET
nITbzjth8+sjoed945iWLCex6qrNiNKtSHTfjtUT4+QknGaks33UoxAkXmLw
q5yDEBiP2CoTEg3h0796Mo9xEO83XYow6I2GYc+jqIbtHISl+7FpD50YiHGv
H/dZw0FkMYUKygdjEC13NTGpeQFHB4N2Ou+Nha7Jt40nxBYQ1emr9/7fc5hb
zieIFM5jj5RFUtfxFzB7rsw9/Ggewye3LebLeIHtimdDnZznsYbhY5ehFg+l
CEezw9LzcHPSUuToiEeaggqH7r2/ELHPep28/SV+JchxRV+fw9k7ayx07F+i
cXVMgrLlHD6+fLCkPuwlijSWNChjDvbd551n+l/CaWnna3euOby3VFY1epqI
esczR9sf/IG5RULWyGgSvuuverg7bxbsdlP+l5LJcP7UZu/9fBaBlnwOx/SS
MWgvUjIdOIscOzfJvPBk5AoH0UrNZyHouivg6rZXoLc+fGuzMIOK260nea6n
YPTK023NZjM4vfjB+/zkFKScLvnbqTeDsbvEcqfvKZgbsloiqTED2QcpFTUy
r/GTMnd7w5IZXIu8pPGo7DX2+/9oii2ehuYbYR4pvjQcqu7rFlSfxreNFdZ1
GmkQmro69Vd6GtbvvD/esEjDwsAy/xXLpvEgj+LenZaGtdmFcfn0KQyWZLS/
OpiOd46bAmvSpvC8yfDdpidvsOyWa1Sq+hSWLtw6vX9NFq7/enB6/sgkopzM
LFX3ZcHqwRUDXf1JKDSqWgu7ZkF2Y5dC/LZJ7E5tsWsvzkJX5HGv5DWTKEiN
eJ+/8S1kkiakvjMnwDzGKDL6/hadDy3kLB5O4PjryJqLy7IxXPkq/RltHLFn
bhuflcuGWuHcrmtt4+gRuVBnvjUbn6p/8Lg2jMPtum79rjPZqF564KZ/0TiC
jzJ/8mZkw+PP5Ervp+Mo/qvb9sw4B95fBFeZHhiHoglr8Mv9XKRUqU3WfxqD
pN9+nXMJudiSGTvQ+H4MyzPi7/Pn54JNPX5r8M0Y/vAd22jSkwvGNz2RHc/G
0FCSf7Fr+3tc6NkWF+w9Bl+NW/9m+t7DrJwrKmPrGL4LiYpuJPKhQlXo1SwY
xZddFxx+HM/Hv6n0qZp3o/hwvjLP63w+9rs71rmljSKxytviY0Q+lu32tWl5
Ngpvv87nBsx8XKby3pT3G8Va9qv1djEfoHAnyOXZ/lFc+a6NqIkCPEF8wmXK
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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["x", TraditionalForm], 
    FormBox[
     TagBox["f", HoldForm], TraditionalForm]},
  AxesOrigin->{Automatic, 0},
  Method->{},
  PlotRange->{{0., 1.01}, {0, Automatic}},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.588557908007487*^9, 3.614995258354737*^9}]
}, Open  ]],

Cell["\<\
To get the analytic form of the CDF, Expected value and Variance:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prob", "[", 
  RowBox[{"x", ",", "f"}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"1", 
        RowBox[{"x", "\[GreaterEqual]", "1"}]},
       {
        FractionBox[
         RowBox[{"2", " ", 
          RowBox[{"ArcSin", "[", 
           SqrtBox["x"], "]"}]}], "\[Pi]"], 
        RowBox[{"0", "<", "x", "<", "1"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.588557909817133*^9, 3.614995260101948*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expect", "[", 
  RowBox[{"x", ",", "f"}], "]"}]], "Input"],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellChangeTimes->{3.5885579100979404`*^9, 3.61499526033595*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Var", "[", 
  RowBox[{"x", ",", "f"}], "]"}]], "Input"],

Cell[BoxData[
 FractionBox["1", "8"]], "Output",
 CellChangeTimes->{3.588557910441149*^9, 3.6149952606635513`*^9}]
}, Open  ]],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["r", 
    RowBox[{" ", "th"}]], TraditionalForm]]],
 " moment of ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"E", "[", 
    SuperscriptBox["X", 
     RowBox[{"\[VeryThinSpace]", "r"}]], "]"}], TraditionalForm]]],
 ":"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Expect", "[", 
   RowBox[{
    SuperscriptBox["x", "r"], ",", "f"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input"],

Cell[BoxData[
 RowBox[{"\<\"This further assumes that: \"\>", 
  RowBox[{"{", 
   RowBox[{"r", ">", 
    RowBox[{"-", 
     FractionBox["1", "2"]}]}], "}"}]}]], "Message",
 CellChangeTimes->{3.614995262613564*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[CapitalGamma]", "[", 
   RowBox[{
    FractionBox["1", "2"], "+", "r"}], "]"}], 
  RowBox[{
   SqrtBox["\[Pi]"], " ", 
   RowBox[{"\[CapitalGamma]", "[", 
    RowBox[{"1", "+", "r"}], "]"}]}]]], "Output",
 CellChangeTimes->{3.588557912578404*^9, 3.614995262629164*^9}]
}, Open  ]],

Cell[TextData[{
 "Now consider the transformation to a new random variable ",
 Cell[BoxData[
  FormBox["Y", TraditionalForm]]],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Y", "=", 
    SqrtBox["X"]}], TraditionalForm]]],
 ". By using the ",
 StyleBox["Transform",
  FontFamily->"Courier"],
 " and ",
 StyleBox["TransformExtremum",
  FontFamily->"Courier"],
 " functions, the pdf of ",
 Cell[BoxData[
  FormBox["Y", TraditionalForm]]],
 ", say ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", "y", ")"}], TraditionalForm]]],
 ", and the domain of its support can be found\n(but note: one-to-oneness \
must be guaranteed)"
}], "IndentText"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", " ", "=", " ", 
  RowBox[{"Transform", "[", 
   RowBox[{
    RowBox[{"y", " ", "\[Equal]", 
     SqrtBox["x"]}], ",", " ", "f"}], "]"}]}]], "Input"],

Cell[BoxData[
 FractionBox["2", 
  RowBox[{"\[Pi]", " ", 
   SqrtBox[
    RowBox[{"1", "-", 
     SuperscriptBox["y", "2"]}]]}]]], "Output",
 CellChangeTimes->{3.588557912625205*^9, 3.614995263393569*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"domain", "[", "g", "]"}], " ", "=", " ", 
  RowBox[{"TransformExtremum", "[", 
   RowBox[{
    RowBox[{"y", " ", "\[Equal]", 
     SqrtBox["x"]}], ",", " ", "f"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"y", ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.5885579126408052`*^9, 3.614995263845972*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotDensity", "[", "g", "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
      "]]}}, 
   {RGBColor[0, 0, 1], Thickness[Tiny], AbsoluteDashing[{3, 2}], 
    LineBox[{{0, 0}, {0, 0.6366197723675814}}]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["y", TraditionalForm], 
    FormBox[
     TagBox["g", HoldForm], TraditionalForm]},
  AxesOrigin->{Automatic, 0},
  Method->{},
  PlotRange->{{0., 1.01}, {0, Automatic}},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.5885579128124104`*^9, 3.614995264469976*^9}]
}, Open  ]],

Cell["\<\
mathStatica has been designed to support parameters; their domain is included \
in the domain definition for the density\
\>", "Text"],

Cell[BoxData[
 RowBox[{"    ", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "   ", "=", "   ", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"\[Sigma]", 
        SqrtBox[
         RowBox[{"2", " ", "\[Pi]"}]]}]], 
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        FractionBox[
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"x", " ", "-", " ", "\[Mu]"}], ")"}], "2"], 
         RowBox[{"2", " ", 
          SuperscriptBox["\[Sigma]", "2"]}]]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", " ", 
        RowBox[{"-", "\[Infinity]"}], ",", " ", "\[Infinity]"}], "}"}], " ", "&&",
       " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Mu]", "\[Element]", "Reals"}], ",", " ", 
        RowBox[{"\[Sigma]", ">", "0"}]}], "}"}]}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"Note", ":", 
     RowBox[{
      RowBox[{
       RowBox[{"could", " ", "have", " ", "used", " ", 
        RowBox[{"{", 
         RowBox[{"\[Mu]", ",", 
          RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], " ", 
        "or"}], " ", "\[IndentingNewLine]", "-", "\[Infinity]"}], "<", 
      "\[Mu]", "<", 
      RowBox[{"\[Infinity]", "   ", 
       RowBox[{"instead", " ", "!"}]}]}]}], "*)"}]}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotDensity", "[", 
  RowBox[{"f", " ", "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Mu]", "\[Rule]", "0"}], ",", 
     RowBox[{"\[Sigma]", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Hue[0.67, 0.6, 0.6], 
       AbsoluteThickness[1.3], 
       LineBox[CompressedData["
1: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
        "]]}}, {{}, {}, {
       Hue[0.906, 0.6, 0.6], 
       LineBox[CompressedData["
1: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
cfz/+eP/ADKMhpc=
        "]]}}, {{}, {}, {
       Hue[0.142, 0.6, 0.6], 
       LineBox[CompressedData["
1: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
1/fprKQWHUyybvz3fqdmHf5o++/9/n/3zgTS
        "]]}}}, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> True, AxesLabel -> {
      FormBox["x", TraditionalForm], 
      FormBox[
       TagBox["f", HoldForm], TraditionalForm]}, AxesOrigin -> {Automatic, 0},
     ImageSize -> 430, Method -> {}, 
    PlotRange -> {{-6.979598623037433, 6.979598619563093}, {
      0, 0.39894205015979595`}}, PlotRangeClipping -> True, 
    PlotRangePadding -> {Automatic, Automatic}],TemplateBox[{
     RowBox[{
       TagBox[
        FormBox["\[Sigma]", TraditionalForm], TraditionalForm, Editable -> 
        True], "=", "1"}], 
     RowBox[{
       TagBox[
        FormBox["\[Sigma]", TraditionalForm], TraditionalForm, Editable -> 
        True], "=", "2"}], 
     RowBox[{
       TagBox[
        FormBox["\[Sigma]", TraditionalForm], TraditionalForm, Editable -> 
        True], "=", "3"}]}, "SwatchLegend", DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{
                  Directive[
                   EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                   Hue[0.67, 0.6, 0.6]], 
                  RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                 AspectRatio -> Full, ImageSize -> {10, 10}, PlotRangePadding -> 
                 None, ImagePadding -> 1, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{
                  Directive[
                   EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                   Hue[0.906, 0.6, 0.6]], 
                  RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                 AspectRatio -> Full, ImageSize -> {10, 10}, PlotRangePadding -> 
                 None, ImagePadding -> 1, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                GraphicsBox[{
                  Directive[
                   EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                   Hue[0.142, 0.6, 0.6]], 
                  RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                 AspectRatio -> Full, ImageSize -> {10, 10}, PlotRangePadding -> 
                 None, ImagePadding -> 1, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Times"}, 
      Background -> Automatic, StripOnInput -> False]& ), Editable -> True, 
    InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             RowBox[{"Hue", "[", 
               RowBox[{"0.67`", ",", "0.6`", ",", "0.6`"}], "]"}], ",", 
             RowBox[{"Hue", "[", 
               RowBox[{"0.906`", ",", "0.6`", ",", "0.6`"}], "]"}], ",", 
             RowBox[{"Hue", "[", 
               RowBox[{"0.142`", ",", "0.6`", ",", "0.6`"}], "]"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
           RowBox[{
             TagBox[#, HoldForm], ",", 
             TagBox[#2, HoldForm], ",", 
             TagBox[#3, HoldForm]}], "}"}]}], "]"}]& )]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.5885579129840145`*^9, 3.614995266232787*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Expect", "[", 
   RowBox[{"x", ",", "f"}], "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{"Var", "[", 
   RowBox[{"x", ",", "f"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Var", "[", 
  RowBox[{
   RowBox[{"x", "^", "2"}], ",", "f"}], "]"}]}], "Input"],

Cell[BoxData["\[Mu]"], "Output",
 CellChangeTimes->{3.5885579133740244`*^9, 3.6149952692904067`*^9}],

Cell[BoxData[
 SuperscriptBox["\[Sigma]", "2"]], "Output",
 CellChangeTimes->{3.5885579133740244`*^9, 3.614995272535228*^9}],

Cell[BoxData[
 RowBox[{"2", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"2", " ", 
     SuperscriptBox["\[Mu]", "2"], " ", 
     SuperscriptBox["\[Sigma]", "2"]}], "+", 
    SuperscriptBox["\[Sigma]", "4"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.5885579133740244`*^9, 3.614995274797242*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M", "=", 
  RowBox[{"Expect", "[", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"t", " ", "x"}]], ",", "f"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "moment", " ", "generating", " ", "function"}], " ", 
   "*)"}]}]], "Input"],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{
   RowBox[{"t", " ", "\[Mu]"}], "+", 
   FractionBox[
    RowBox[{
     SuperscriptBox["t", "2"], " ", 
     SuperscriptBox["\[Sigma]", "2"]}], "2"]}]]], "Output",
 CellChangeTimes->{3.5885579157920866`*^9, 3.6149952772620583`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"FisherInformation", "[", 
    RowBox[{"\[Mu]", ",", "f"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Sufficient", "[", 
    RowBox[{"f", ",", "i", ",", "n"}], "]"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "helps", " ", "us", " ", "to", " ", "inspect", " ", "the", " ", "joint", 
     " ", "distribution", " ", "and", "\[IndentingNewLine]", "to", " ", 
     "identify", " ", "sufficient", " ", "statistic"}], " ", 
    "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.4601673324375*^9, 3.46016733396875*^9}}],

Cell[BoxData[
 FractionBox["1", 
  SuperscriptBox["\[Sigma]", "2"]]], "Output",
 CellChangeTimes->{3.5885579162756987`*^9, 3.614995280522479*^9}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    FractionBox[
     RowBox[{
      RowBox[{"n", " ", 
       SuperscriptBox["\[Mu]", "2"]}], "-", 
      RowBox[{"2", " ", "\[Mu]", " ", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["x", "i"]}]}], "+", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubsuperscriptBox["x", "i", "2"]}]}], 
     RowBox[{"2", " ", 
      SuperscriptBox["\[Sigma]", "2"]}]]}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"2", " ", "\[Pi]"}], ")"}], 
   RowBox[{
    RowBox[{"-", "n"}], "/", "2"}]], " ", 
  SuperscriptBox["\[Sigma]", 
   RowBox[{"-", "n"}]]}]], "Output",
 CellChangeTimes->{3.5885579162756987`*^9, 3.614995284126102*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Our", " ", "old", " ", 
    RowBox[{"friend", ":", " ", 
     RowBox[{"Bernoulli", " ", "distribution"}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"f", "=", 
    RowBox[{
     SuperscriptBox["p", "x"], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", "p"}], ")"}], 
      RowBox[{"1", "-", "x"}]]}]}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], "=", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "1"}], "}"}], "&&", 
      RowBox[{"{", 
       RowBox[{"0", "<", "p", "<", "1"}], "}"}], "&&", 
      RowBox[{"{", "Discrete", "}"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"Expect", "[", 
    RowBox[{"x", ",", "f"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Var", "[", 
    RowBox[{"x", ",", "f"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"FisherInformation", "[", 
    RowBox[{"p", ",", "f"}], "]"}], "\[IndentingNewLine]", 
   FractionBox["1", 
    RowBox[{"n", "  ", 
     RowBox[{"FisherInformation", "[", 
      RowBox[{"p", ",", "f"}], "]"}]}]], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{"which", " ", "is", " ", "the", " ", "CRLB"}], " ", 
    "*)"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "-", "p"}], ")"}], 
   RowBox[{"1", "-", "x"}]], " ", 
  SuperscriptBox["p", "x"]}]], "Output",
 CellChangeTimes->{3.5885579165721064`*^9, 3.614995284172902*^9}],

Cell[BoxData["p"], "Output",
 CellChangeTimes->{3.5885579165721064`*^9, 3.6149952841885023`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "p"}], ")"}]}], " ", "p"}]], "Output",
 CellChangeTimes->{3.5885579165721064`*^9, 3.614995284375704*^9}],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{"p", "-", 
   SuperscriptBox["p", "2"]}]]], "Output",
 CellChangeTimes->{3.5885579165721064`*^9, 3.6149952844069037`*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"p", "-", 
   SuperscriptBox["p", "2"]}], "n"]], "Output",
 CellChangeTimes->{3.5885579165721064`*^9, 3.6149952844381037`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"more", " ", "involved", " ", "discrete", " ", "distribution"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"f", "=", 
    RowBox[{
     RowBox[{"Binomial", "[", 
      RowBox[{
       RowBox[{"r", "+", "x", "-", "1"}], ",", "x"}], "]"}], " ", 
     SuperscriptBox["p", "r"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", "p"}], ")"}], "x"]}]}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "number", " ", "x", " ", "of", " ", "failures", " ", "until", " ", "r"}],
      "-", 
     RowBox[{"th", " ", "success"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"domain", "[", "f", "]"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "\[Infinity]"}], "}"}], " ", "&&", " ", 
     RowBox[{"{", "Discrete", "}"}], " ", "&&", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0", "<", "p", "<", "1"}], ",", " ", 
       RowBox[{"r", ">", "0"}], ",", " ", 
       RowBox[{"r", "\[Element]", "Integers"}]}], "}"}], " "}]}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "-", "p"}], ")"}], "x"], " ", 
  SuperscriptBox["p", "r"], " ", 
  RowBox[{"Binomial", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "1"}], "+", "r", "+", "x"}], ",", "x"}], "]"}]}]], "Output",
 CellChangeTimes->{3.588557916915315*^9, 3.614995284453704*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"x", ",", "0", ",", "\[Infinity]"}], "}"}], "&&", 
  RowBox[{"{", "Discrete", "}"}], "&&", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"0", "<", "p", "<", "1"}], ",", 
    RowBox[{"r", ">", "0"}], ",", 
    RowBox[{"r", "\[Element]", "Integers"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.588557916915315*^9, 3.614995284453704*^9}]
}, Open  ]],

Cell[BoxData[""], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotDensity", "[", 
  RowBox[{"f", " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p", "\[Rule]", "0.5"}], ",", 
     RowBox[{"r", "\[Rule]", "10"}]}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {Hue[0.65, 1, 1], AbsolutePointSize[5], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQBWIQjQoC7CH0ByhdAqUZHMBkQzeUzwHlz4byBSD8iGVQ
vgiE77EeypeA8Hs3Q/kyUPXboHwFML9h73YoXwmNrwLmL+iFqVcD8w80bIHy
NcD8FR82QvlaYL5BzDooXwfM9/mwAsrXA/MLPi+G8g3A/Hid+VC+IZi/+Np0
KN/I4cb///a/HkyE8o0dJIAka2QXlG/icPr///nKUs1QvqnD5P//97/0rIby
zRyu/P+//ollMZRv7nD5////N/dnQfkWDjYMDA+eJidB+ZYOzUD9e5kioXwr
hz3///d3XoXFj7WDKtD7PEVuUL6NQxRQ/t8KW3sAbFlb1g==
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["x", TraditionalForm], 
    FormBox[
     TagBox["f", HoldForm], TraditionalForm]},
  AxesOrigin->{-1.4000000000000001`, 0},
  Method->{},
  PlotRange->{{-1.4000000000000001`, 28.84}, {0, 0.09551734924316406}},
  PlotRangeClipping->True,
  Prolog->{
    GrayLevel[0.5], 
    AbsoluteThickness[0.4], {
     LineBox[{{0., 0}, {0., 0.0009765625}}], 
     LineBox[{{1., 0}, {1., 0.0048828125}}], 
     LineBox[{{2., 0}, {2., 0.013427734375}}], 
     LineBox[{{3., 0}, {3., 0.02685546875}}], 
     LineBox[{{4., 0}, {4., 0.04364013671875}}], 
     LineBox[{{5., 0}, {5., 0.06109619140625}}], 
     LineBox[{{6., 0}, {6., 0.0763702392578125}}], 
     LineBox[{{7., 0}, {7., 0.0872802734375}}], 
     LineBox[{{8., 0}, {8., 0.09273529052734375}}], 
     LineBox[{{9., 0}, {9., 0.09273529052734375}}], 
     LineBox[{{10., 0}, {10., 0.08809852600097656}}], 
     LineBox[{{11., 0}, {11., 0.08008956909179688}}], 
     LineBox[{{12., 0}, {12., 0.07007837295532227}}], 
     LineBox[{{13., 0}, {13., 0.05929708480834961}}], 
     LineBox[{{14., 0}, {14., 0.048708319664001465`}}], 
     LineBox[{{15., 0}, {15., 0.03896665573120117}}], 
     LineBox[{{16., 0}, {16., 0.030442699790000916`}}], 
     LineBox[{{17., 0}, {17., 0.023279711604118347`}}], 
     LineBox[{{18., 0}, {18., 0.01745978370308862}}], 
     LineBox[{{19., 0}, {19., 0.012865103781223339`}}], 
     LineBox[{{20., 0}, {20., 0.009327200241386798}}], 
     LineBox[{{21., 0}, {21., 0.006662285886704827}}], 
     LineBox[{{22., 0}, {22., 0.004693883238360248}}], 
     LineBox[{{23., 0}, {23., 0.0032653100788593097`}}], 
     LineBox[{{24., 0}, {24., 0.002244900679215815}}], 
     LineBox[{{25., 0}, {25., 0.0015265324618667093`}}], 
     LineBox[{{26., 0}, {26., 0.0010274737724102886`}}], 
     LineBox[{{27., 0}, {27., 0.0006849825149402062}}], 
     LineBox[{{28., 0}, {28., 0.00045257773308548176`}}]}}]], "Output",
 CellChangeTimes->{3.58855791708692*^9, 3.6149952848749065`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Prob", "[", 
  RowBox[{"x", ",", "f"}], "]"}], "\n", 
 RowBox[{"Expect", "[", 
  RowBox[{"x", ",", "f"}], "]"}], "\n", 
 RowBox[{"Var", "[", 
  RowBox[{"x", ",", "f"}], "]"}], "\n", 
 RowBox[{
  RowBox[{"Expect", "[", 
   RowBox[{
    RowBox[{"t", "^", "x"}], ",", "f"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "probability", " ", "generating", " ", "function"}], 
   " ", "*)"}]}], "\n", 
 RowBox[{"FisherInformation", "[", 
  RowBox[{"p", ",", "f"}], "]"}], "\n", 
 FractionBox["1", 
  RowBox[{"n", "  ", 
   RowBox[{"FisherInformation", "[", 
    RowBox[{"p", ",", "f"}], "]"}]}]]}], "Input"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        RowBox[{"1", "+", 
         RowBox[{
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"1", "-", "p"}], ")"}], 
           RowBox[{"Floor", "[", "x", "]"}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", "p"}], ")"}], " ", 
          SuperscriptBox["p", "r"], " ", 
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"r", "+", 
             RowBox[{"Floor", "[", "x", "]"}]}], ",", 
            RowBox[{"1", "+", 
             RowBox[{"Floor", "[", "x", "]"}]}]}], "]"}], " ", 
          RowBox[{"Hypergeometric2F1", "[", 
           RowBox[{"1", ",", 
            RowBox[{"1", "+", "r", "+", 
             RowBox[{"Floor", "[", "x", "]"}]}], ",", 
            RowBox[{"2", "+", 
             RowBox[{"Floor", "[", "x", "]"}]}], ",", 
            RowBox[{"1", "-", "p"}]}], "]"}]}]}], 
        RowBox[{"x", "\[GreaterEqual]", "0"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.588557917913741*^9, 3.614995287136921*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    FractionBox["1", "p"]}], ")"}], " ", "r"}]], "Output",
 CellChangeTimes->{3.588557917913741*^9, 3.614995287604924*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"r", "-", 
   RowBox[{"p", " ", "r"}]}], 
  SuperscriptBox["p", "2"]]], "Output",
 CellChangeTimes->{3.588557917913741*^9, 3.6149952879325266`*^9}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["p", "r"], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "p"}], ")"}], " ", "t"}]}], ")"}], 
   RowBox[{"-", "r"}]]}]], "Output",
 CellChangeTimes->{3.588557917913741*^9, 3.614995288041727*^9}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["r", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "p"}], ")"}], " ", 
    SuperscriptBox["p", "2"]}]]}]], "Output",
 CellChangeTimes->{3.588557917913741*^9, 3.614995288182128*^9}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "p"}], ")"}], " ", 
    SuperscriptBox["p", "2"]}], 
   RowBox[{"n", " ", "r"}]]}]], "Output",
 CellChangeTimes->{3.588557917913741*^9, 3.6149952883069286`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Now", " ", "we", " ", "want", " ", "to", " ", "calculate", " ", "the", 
    " ", "CRLB", " ", "for", " ", "estimating", " ", "the", " ", "parameter", 
    "\[IndentingNewLine]", "lambda", " ", 
    RowBox[{"(", 
     RowBox[{"the", " ", "Expecteed", " ", "value"}], ")"}], " ", "of", " ", 
    "the", " ", "Poisson", " ", 
    RowBox[{"distribution", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "=", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "\[Lambda]"}]], " ", 
       SuperscriptBox["\[Lambda]", "x"]}], 
      RowBox[{"x", "!"}]]}], ";", "         ", 
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], "=", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "\[Infinity]"}], "}"}], "&&", 
      RowBox[{"{", 
       RowBox[{"\[Lambda]", ">", "0"}], "}"}], "&&", 
      RowBox[{"{", "Discrete", "}"}]}]}], ";"}], "\[IndentingNewLine]", 
   FractionBox["1", 
    RowBox[{"n", "  ", 
     RowBox[{"FisherInformation", "[", 
      RowBox[{"\[Lambda]", ",", "f"}], "]"}]}]], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "We", " ", "can", " ", "also", " ", "get", " ", "a", " ", "sufficient", 
     " ", "statistic", " ", "by", " ", "inspecting", " ", "how", " ", "the", 
     "\[IndentingNewLine]", "joint", " ", "distribution", " ", "is", " ", 
     RowBox[{"factorised", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Sufficient", "[", 
    RowBox[{"f", ",", "i", ",", "n"}], "]"}]}]}]], "Input",
 GeneratedCell->False,
 CellChangeTimes->{{3.460167308859375*^9, 3.460167309953125*^9}}],

Cell[BoxData[
 FractionBox["\[Lambda]", "n"]], "Output",
 CellChangeTimes->{3.5885579188341646`*^9, 3.6149952886033306`*^9}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "n"}], " ", "\[Lambda]"}]], " ", 
  SuperscriptBox["\[Lambda]", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubscriptBox["x", "i"]}]], " ", 
  RowBox[{
   UnderoverscriptBox["\[Product]", 
    RowBox[{"i", "=", "1"}], "n"], 
   FractionBox["1", 
    RowBox[{
     SubscriptBox["x", "i"], "!"}]]}]}]], "Output",
 CellChangeTimes->{3.5885579188341646`*^9, 3.6149952893521357`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"    ", 
  RowBox[{"(*", " ", 
   RowBox[{"multivariate", " ", "rv", " ", "can", " ", "also", " ", "be", " ", 
    RowBox[{"treated", ":", " ", 
     RowBox[{"(", "Gumbel", ")"}]}]}], "*)"}], "            ", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "   ", "=", "  ", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "2"}], " ", 
        RowBox[{"(", 
         RowBox[{"x", "+", "y"}], ")"}]}]], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"x", "+", "y"}]], "+", 
        RowBox[{"\[Alpha]", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", "x"], "-", "2"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", "y"], "-", "2"}], ")"}]}]}], 
       ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "\[Infinity]"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"y", ",", "0", ",", "\[Infinity]"}], "}"}]}], "}"}], "  ", "&&",
       "  ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], "<", "\[Alpha]", "<", "1"}], "}"}]}]}], 
    ";"}]}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"f", " ", "/.", 
    RowBox[{"\[Alpha]", "\[Rule]", 
     RowBox[{"-", "0.8"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Note", ":", " ", 
    RowBox[{
    "PlotDensity", " ", "works", " ", "only", " ", "on", " ", "functions", 
     " ", "of", " ", "one", " ", "argument", " ", "but", " ", "we", " ", 
     "can", " ", "use", " ", 
     RowBox[{"Mathematica", "'"}], "s", " ", "Plot3D"}]}], " ", 
   "*)"}]}]}], "Input"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
OunBS5pczgAxMDgcHj0zCT2vZI+yZKkMEJkzXL+WY/Ho+USpZ4Qu9w8p8ap5
HEKYuuUMWqfqGlFPU6LxK81InHZZMgA969P4G+VnLFhi4oue/Wj88pckerbc
8EbPpTR+yV+dco7WT9HzoNr/4vc6XOowdqUrel5O4/8p9bWetcsZPWvQ+Cdn
T8j3LHREz13xXiWcTzwKage97mxZnM2sR//zw6Og8EiQpycvg6nzfF/3Y8iY
R8H3eWG37e9U9Cz97+/yKGybvXeeqEYielZeVSqmMplHofXjXOtH1nHoOc1n
gwaXM0Q2OOg7ypyNRs9dTeUPWCpDpN/kd/gk5zD0XE7rVBoj6mkfaPxaPbvG
yHQ+Y+rwNH5v7b8cdzMP9Dydxp/R/Vn2a44rel5B49fcqRAv4eyMnpVo/GLL
XgV+rXNEz8k0/ufcVI1pY+3RcyeNP8KqQf62MFO3lE6T3cAO4FPwmui3cJ0b
U09T/nef8Clkc73vydimMnWe/rKT3HV8ClGn/GaVNHPQ8//mwauwt/pj1oTR
cUwdXvayGauAV0Hpp/G5cSFR6Dng333Fq8A5KmHHuhiKnlMNRofqavAqbJ2Q
+H3mtKAR9zOfgvWIetpKGn9OeNZosUPu6FmJxu/dqrw5POUJej5B4xdbukNc
KJSNnvVp/KImnZ5HJzqgZxsaP2d/wJTWmMfo2Z/Gn3KmZmrq50foOYXGv9l6
ulxQihl6Nsiq8NPVGK0gkxJxcen6VGa9Q9NnLZs1WsHCPaWs34rD5A1e3XzO
p1EKP5443xQMiUXP/7s/Ryl8uz0YI/shkqkPE4HPQ8ajFLosjRfP9w1Bz/+7
b0cphHk61rXuCGT6K+4/m6IyeZQCZ0ZAXwrHFz2fhDrYiHraTRq/RmXakUXL
ndGzDY0/y1Ci32SDI3r2p/HHmQT3b9KzRc8pNH7nfr5demut0HM5jf/81uzx
J56Zo+cPNH7nz09Xb3QxZdaVaPwKcmODc0Yxdcu011fGqUwWUJDYYikcJc9h
6vAXNz3T5fIrCGdk7tbQikXPH4WEZNgB/ApSqe4Jiqcj0TNfcGU2R5dfofwr
z/iMaSFMfVjZV527jl/BZ+CJG0kLQM/SHbpdQ0OjFTrLVt5yWcLULZXNN95j
FYz+73NpXOKh54meA2idat6Ieloqjd929+PsS2IO6Lmcxn9lt8Nig3OP0fMH
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
+GJFI/l/BP1PCQ==
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
1xr6vZjzdXS9j3L/fe2Z7/inRNZ1yBHl+GjNvELXV0yEz1F8jtah4lc1R+Dt
ytFZ38/nOeeTL+Ftej6OwxrnjOuF7Z5mmVOj7+UgfV/RUVTXhGto/uie+d0N
OdcI62lLZq2Dc/lrluL4MeP7LZ117aTvj8taKxfNj7kk0s78b+t3VUsWyPp5
le+K0/dzzu9G5/+U8bX1GyHr+9N9ls3fu64jbaw6rnDW7+5Axu9va/4aRfK/
q/dZ+P/6dU+qkXQUyP+WTtyfcdwsnR//Yhk/h55ndcbPLNa4h/y9aTw389vH
6jo5f18yf76uUSJ/nTL58zVWasvk38dvHMfDWvaHNW60p9DOj47lC2ifjK4/
nqJ9JlqDNo3+Xf2ttOWR/O/tyT+vxqF4fq7ty8839WmM1K94+EfGWuXv/DxU
vFQ81zhIk+RU38It4eP5rhbchmusiNaRLZTrlffov5z+FsHxX/pqU3QNLE1y
XnBMkGa4AO6fsTZrFZxHpNnaBOcXab9jcv7dBlzzlej66nzavTmPT3O4UHDe
aQ1/GF17t9XfBsf5NsrF9DWHu3OdwvSfpTiv+R78LBdrTQfH/3ZwueD4rzwe
gnNuK63v4HzRXuMQnMuU38vCDeFLFJuD8530QMPg+CmN0Tg4Nkq7Ng2OsdIY
bYNzq3TsWcFxVXpJmk7jM0Z5JzgGSl+dExwbpcFqBsdk6bSvo/0F6cAzg9+F
NJh0ufT56py1QsV8vJE+1ThcoLWR9RyokI9zB/Oxrnr0PNLarxacO6QDpVU1
ts35u6rBOVG6q1KwxpBekj69Ab6HczrTPzRjbd8zuE5UvdguWHtI2++Krhul
aesH5wvptLpwj4z13ufRPlEnPUdwfpeOqhD8fqWvKgdrG+m004Jzk3Tg6dLu
mbxmC87d0l2KzcoTIR+XCubjSeN8PFRcXBLsdSjXbM25xpfOf4VjFfww/QuD
dcs8zY3kOl857vlgTSId+2qwnyB9uzTY95AGXhDsq9wtHRjspUgPPx2sf+6B
lwX7J09o7QdrobnwC8H65z74xWAddX90jl2v96l3G11Xq2YZFvxepPkHwWMz
rndU08yEn+T8gcE6ULXPqGAvRfXCtfCtGdcI1wR7MtLMi4O13IPwS8Ha7AH4
rmBv6hZ4VrBnNRWeDc+Hb4bvDfa4bofvC/a47tDYJ9f2yvXzpI3onwbfTN8s
eAH3ORWeDT8Nj4On6h7gSfAdGkP4evh2jTk8A74ffhGeCT8Av5S1dySP8QV4
NHyTxhMeC9+sZ4Fvg++Gn4VvhefAC+FbpKHgZ+Ab4Rl6R8ptyZ9Vr91AO13v
mv7J9B/KWic8Ja1P/5xoLaa59CPf3R/sU02P1js65yv65wT7XbfSXzrZD5J+
eyLYg5oNPx5ca8+KzkXSH5rb7+ecW8rT91hw3X2nrh9cj8+EH9WchmfAYzh/
iuaSnp3+h+DJiqvJnpFqXtW+ei/vSGflXPtLc/6T19vKI7/k7KVIx+7KORZJ
6+7I2aOQ1v0Trp5xLXwoZw9ENfL+nH0GadomwT7SLtrjgr3lH2j/yNkbUQ14
MGfPQTXUgZx9EmnjPTl7HdLnzYI9q19pd+fsmUifH8nZ61DNdVSwVyzNXCDY
u1btX5CjQcZ1aDbY41VddnSwnyz/IQV72tLnRYP95w20pYJ98u9oy3C00bsO
fjnyjaXtiwd74JtoiwX75BtpSwf76t/T/p6z56Pa4TJ4JHwb49882HP7TfcY
7Nf9QrstZ19LdYf8A73Hl6Wdcva15EvUCPao/61cx9Ed3kp7E8fcjD2TycEe
u+r3ccGxQn7CtGAf/ib49mDvfYrWafCa0tqaEuzZqgYfH+zHym85Jdj33kLb
KNhX3ElbJdgD/5n2pGDPfLNySz53/K6xDH723bS1OS6Ht2vsg/2uHbS1gv2u
bbRdgv3MQ7p2sM/5J21HjjHwH7Ttgz3J/bQXB3uV+2gvCq4B92reBdcae3Rf
wT7kAdoTg/38n/R3yd668kL3YA/zsO492WtWfN4R7aWq3pEvL60mn+eXaM9U
5/8a/Y7/0dwPjnUF6RseHAOPjv/bk1He+i26FjpCx85of1a11e/RdawCwFXB
sasQXDVZtymfyovcnL9O5WTNJB11cnItLY30XrQPqPn8frQ/qPn5QfT+h+bt
R9H7OprnQ4Pj4VH0fRy9D6Q5/Gn03ozGan20D6N1vSHa39PaXBW9Z6M1fnlw
/Cyg+4zev9Ha+Sx6P0lzY0RwHD6Gvt3RXnOWdmqwH655eCP8JFxK+RC+By4C
3xrsIR8H3xLspZdW3A722EvC26K9VM2fetE1hOrlq4PzQuFoH0Y6u350nRI5
NuX8Wf3SXXuive+c3k9wzhJvj/bZNSeHBOevFL0XphheR7olum6Upzc4OK9F
uFyyVpY27h1c/2rO9Ar2zKW1+gXnMo3JAPgWhR64fLKml4Y/KdkTkdbtGxz/
NWdScp4rAX8Rveentbk22gNUnCmR7LmfpLyT7LmfCBdL3pM4AZ4fvPdRES6Z
7NdXgI9L3gupBJdK3gvROUWS9zDKwsWT9znKw/ui9yf07Aei9w80N/ZH72Fo
3PZG7xPoGe8J3lvRPZyY7PWolnkoeJ9F91wh2Z9SHTE3eJ9Fv1Up2cNSvXAn
/S/TXw4+IdmPUw3yMP3vZPwsDwbv6ejZiybv0+j8Msn7OpXhmcH7FHquGcH7
FMfDhZP3ZsR/R+sPzat/ovWN5upRyVpEc3hR8L6SrlkwWdNoDh+drHU0h7+J
3l9UbCyQrF00n58L9gQ05uuifVHF3kLJe0Vl6JsevG8iDsna619wTNZex8LZ
ZH1THD4SrbeK0n4b7dMqDv8Vrau0Ng9HawvFny+j94wV/1dH74kqB30VvX+s
HKS9y5iv+/+M9ncUA2XmSOcVgw9F7w8pHsr7k95eq3mTXEurRl4TvbeqXHAw
em9JcWlS8B6Z5nafYO2n+DkmWB/q+lWS/VPVhqck+6eqAU9N9r9U9w1J9jSl
wQYne5TSYBuj/WTl5UHJfqW01mXJvqc02LDkvUbp/5+j9zWUg64P3qfTOMvn
0TPdkLyfKL9BewTag5cPojhTJR+XFJ9+jN7jUJ7aEr2Hojy1OXpvRXntp+i9
EuW1icH7g3q/Q5P3d6VLr0je31UNcmXyPq5qnK7J+9PShFcl75uqBpkA/5G1
PzYueV9ZNUvf5P1jafiRyfuvqhGuSd6TVu0wPHk/WHVNv2T/V3VBr+Q9JNUR
A5N9XmnUAcl+sXRy/2SPWLVDj+R9JtUX3ZP3faVJeifv10o/90zef1I90i15
f10a5vvoPRRpjIrJXrA8hLHB+6Sa53/ka0TlTMV0xXb934FDeb2tvT7p7S0Z
7xv/EL0PJa0iH1L+vHz60cH1iNaLPGPV3vLr5PnI65PnpxpctfvEZP9Hnp68
xv8A19j+lw==
         "]], Polygon3DBox[CompressedData["
1:eJwtmnfgV+Mfxe8zPhWSFSmlokIiSoQoDUokiSjtHZVNGYUSssmOyiYqe0ah
iAgNM1Gy9x7xO6/fuX/c7+c5930/4z73ed7vc87723DQ2B5jYlEUV+tP1uu8
VBQr9fqU8EmVopgkfK/wVOGjhW/URS8IrwpFMUb4BuHnhVcKjxa+QNffI3yp
ru8pfKbiE4VvUPxw4ZuEXxb+QHiscH29VhH+UccyvWe83n+bxhdofKTic4SX
Cz8hPFH4b702F95Sr+cJX6L4g+Xv7yX8lPBq4YXCZwk/KfyR8ALhM4UnC98n
fJnwMcJPCH8o/ILwGcJPC38s/KLwOOHHhT8Qfl74dOGHhVcJPy18svCjwu8J
Pyt8qvAjwu8KPyN8ivD7ev1b+B/uWeOXdazj9+u+12rcWfPRRPgA4e11/el6
/03C5yh2hPB1ij8r/I7io4Tr6VUvxWc6FumamYov1Xhd8P2dJjxO+ErhQ4UX
CnfXeF+dq6LPfli4tfAOwt/r/U8KtxPeRfg34aeF2wvvKvyH8FPCBwk3Ff5d
+EXhI4X3E66qzztZeLjG5+ncIfq+K3XuTuEbdW0N4QsVv134ccWPEx6t+AXC
Zyj+l2JjhC8UPpN5Eh4rPEn4LOF/hE8Sniw8TniD8KE6dhfuqM9rwHpMnp8Z
ivcXPkzxPYQP5h6Fr1b8ceGbFO/D81T8QMV20rlfeKbC4zW+Sue6Kt4lO8Y1
9YXv0vtfFZ6ta0cIzxVeIfxk9Po9Q/hm4XOFuws/Jvy+8Hzh04QfFF7I/Qtv
K3yn8CvCDwgP5/kKPyl8i3Bf4WuFnxC+Wfh44a7Z672Tfk9D1qtwW4131rlf
dc00Xf+Uxrdq3E/x2cILhB8TrsV61PX76vodde4HnbtX8dc1nhu9nh5VfD/F
G7EHde4Zxddo/BJ7UfFZir/BegveT6cqfqPw2Yp3E74oe78/F/x7JwvfzX4I
nu8Tdf1VwqdF7//5indRrKXOFYpdmr1/X9K5AYo/K3yIxnvq3L96z3PCnYVb
CP8nfILec6XGp2p8GOst+/m+rmuGCl+VPX9LhYcJn528/i7U9T2EL87e/88H
z9c52Z93d3B8nPAlwrcH77+zhC8Wvi34fu8QflN4fXB+mJ69Pj4O3v/nZt/v
PcJHCd8u/Jrwp8H5Y0b2/K8Nzjfn6PfNEJ4Uff2U7Hw7P3g9XJ29Pt4IXi+T
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
C7wLPA682v8BqosVOw==
         "]], Polygon3DBox[CompressedData["
1:eJwt13f8TmUbAPCf53l+CW0tlEKpJEooSfYKySirbGVv2WTvLXsUkgilSEOL
9vC2F+16W9Jeb2/1vT63P67Pfa7vuc55fr/z3Oe676dU1wEt+2fy8vLeE/ni
8mxe3mXiplxeXnMn3jHeIoY4vrNAXt4G8bu8qZomYoDjds59arxG3kwMdNye
fWa8VOyL+7vuHVZZfqOo43go6+jcha55XuSz/aIoO2z8L6tnvFldS1ZBPty1
Q9lGNo/1YTew2mwIu5GVY9eK5mKQcx2c+9z4mPwPNS/LD8fnss6ioXwk78oq
qmnParJBrAO7gF0pqoubnbvWuXeNg+N/cTxP3Uh11zv/W/w9bDzrxVrJO6ir
xQazG9j57DvRktX00Gs7riP2iN/VvMQPxee6rotoJB/Fu7GL1XwhrmJdWBN2
nryrusZsNOvOLmHfZtPfWsNn1IhrRDF1S9hD6tarm8s6sQZsBBsu3pBPFovZ
M/Lt6mapOyRasKvcr6bjWqKjurpsmLpO6sqzo9kwtoxNZP3YFaKa6BHzxLm3
jQVEL8ez1d2irkvMATaALWRjWU/2d8xHNoMNYR3lWXV92Fw2gnVjGdabzYn/
g3VlI9hotpUtZUPZeDaL7WF3sYnsVjabPcY2sclsJBvDtrFlbAj7J+YAm8mG
sk7yPHU92Sw2TNqZ5Vi8WAvYGHYzO4oNZIvYONaLDWHd2RJ2mzgk/zWb5mxD
z7lFzBPxvbiO1Wb1HTcQw9T2Y2tdN8P9urNxbCZ7lG1kk1hBNogtZuNZb1aE
jWAr2RQ2kB3DRrJVbCobxI5lo9hqNo0NZoXZcLaCTWYDWKHoE2w5m8T6s2+y
qYdcmZ/enXiHJqhbwPaqe0oUdm4SW8Selm9z7Ux1f4kubDIbwNrL/x/znE1h
A1kH+UmuncruZovYOPZV9CE2kLVnVeXd1TVhY9lN7FLWjV3NxrAerBL7Opvm
Z/X81AejHw5V15etUTddXQ/2pWjKBrB2rIp8bLw3bBdby0azomwa28wWs/Hs
ZDadbYnvnN3KTmRT2Ca2kI1lp7K57D62ik1jp7F5bAdbzaaziWwh28e2shns
dHYb283WsTnsODaO3cFms+HsFDaD3cOWsAnsBHYrW8/mspFsDJvEdrI1bBQ7
no1n69gcNoKNZhPZA+x+kfEcR7GxbLt8ubph6lrH2sB6sObsDLaOPcV+ZgfZ
bvZLNq0lDfJTP4++viZ6Ofte3WFRzLnSbGesVzGvXLtV3Vr2OPuhQFrfdrLb
2RPsR/Y+28XKsF3R09leto3tjb4jvyDmKPsqk/pkfWPP6O2iis9dyu6P9UX+
irrNrlvNHmXfxZrH7mfL2APsC7afbWEr2EPsG/Ymu5fVZv+TlxHniOI+Yznb
re7r6M3qtkcvYFVZu5jj4kJ1+6I/xbEoou5r56uqe9f4JXuNXZZL616sf6/w
Z2Ndj/dPbHf8sbqPxKnuN4Pdzl6TvypOZNPZKvaKfLd7LPaZM9kd7HX2KFvG
FrN72SfsRXYX68NaZ9IaE2tN9LIlbEfsFWJdVne3uqfiXZefJwqxL51/kv0p
LyUKsi9iHrv2SeNP7AB7UM16tpf9wj5gD7ENsQdhv7IP2cNsFXsk1ln2NtvB
VrKH2bfsLXYfu43dF/ubWJfZJtaOVWf92PWsDKvHisRay8qynxxfG8/aeCNr
wIpGP2Tl2A2sPjuJ1WWFo0+y6mJnrJHiAtZBXk/didHT2PmZ9H3H9/5c9DRR
mrWWX6WucPQlVoZdx2qyY2LdZhezrqwpK86uZ5ez3qwVO5u1YpVYd3YNK8Gu
ZqVYK1aDFTky/y7LpPcg3of98W6Ik1g9eYXYq0TvEyvZy+xBtijWLlaU1WcV
o+/G3kWUYM1YVZY98p7vyaT5GPNyaH6ap9syaT7GvOx1ZJ6uzaT1JNaVTqwt
u4L1lV/nfqXdrw2rxvqw1qwU+1zUYJ3Z1axsNu13B2fSehzrclP3+yzWr+gB
8sbqzpU3VFeMNYlrxeO51P8mZNI+OfbLLfLTmjc/k/ph9MU2+ek9/yvmijhX
bM6lvUA3dVNjrY3PUdeIFWdNo9/43IzPPZOtiXeC3cOWsilsOXsx5g9byKay
FewltostYD/Gc2B13btxfLeiuLql7GF1G9TNY++Ks1gdVp4dLX9HlIw9SPQY
VlD+dvw9rBYrx46Sl3C/ZeyReAZsPns11hVWiZ3J/oi/ix1tLB39hv3o+D+x
rhgvZmew32PuxN7EWC56Pfsl+k/sTYzlo0eyX6NPxTpqrMxKsj/jecT+x3g2
O4X9EP2CtY15mp9+w8Rvmf2xPrIK6kqo+83xW+wMY81YB1i+/I1Yl1m16M95
MVH1a9GZTWL9UTv5B57BwVzqebFv+zCX9suxb+6VS3v/93Np3x/7/96OW7ED
xj/kHR1PcL++7tcmep/oxCayfqytvFHMQdEvl77Tj40/Z9Pvsfr56bdY/CZ7
M/YN7IqYa64tIP8h3v/4fvPTPeJeh7Ppb6jF6kZPy6bfDPHboWcu7f3fy6W9
Z+xB++bSPT4yvh57CceXx9rlM/7JpLkVc6x/Lj3vT4zvyc+O+afuInWF5NX4
344PxHstNspLijsdP6duh3Or1c1jd8dzY0+z22OOso3s+dhvsDVsLtuUSb85
97E7WCm2NeYXe4RtZAvYFnaQPcvWs/lsc3wP7Bm27kh/LpRJ72m8ryU8n1ls
HXtDvkfdcnWz2Xr2JnuMrWBz2IaYS9Ef2MqYU2w1e4JtYUvYQnYP+yD6OtvA
ns7GC+85sWMcfhPfl7qssUqB+CJ9p/Jn1BVgFeXH4m8zaa04L5P6UvSnMv7m
j9RVYC1inVF3mvxDcVGsVXEvdqr8Y1GRtWRXstPln4jKrA2rw0rKPxVVWFtW
l50lPyDOZY3Ypex4+fviHNaQVWLHyQ+Ksqwxq8xOiHnhb76LvRB9kq1lL4ij
WEl2Mvs+nhErb2zOqrFT5M9l0zsf7/7r8cxyqT+fnklraqytZ3oGz6rLsEvk
x6k/FP+nukuM3VgzVkzNv5DsCJ0=
         "]]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0rsvX2EcB+CXn0vdRalGggiJSPMjIiSEv0AnxMBGDDVUIgZGMTA2Bh0b
A6OJzcYiNvdSl4rB/V6DSOo5Yfi8z+ddzvd9zzllPQNt3xNCCBOSrUQ9y3LB
k8QQcvkk13opX1jNjFgILSziV1axm41skn69kyPsi709f4g/OcZZTnKB01xm
fVIIzyw0f535TJQz2bA/5yYvuMVLbvOKO9EZ+Zs3vJVd/Y57vOcfPnCfjzzg
Px5Gd+QR99zvhZ/t/7KAMVl0xjX7OS7xF+f5gzMc5RQHOc5eDrOD7fJNb2AX
K9kazWAz0xjns9klrPYeHvjJ3Bx+5H/WMZu1zGINMxlnBr8wPfoWTIvm8AMr
WC6pehlTWMpkFtO4cGx2XnRXfVW/JMKK5fT933gFrYlDBg==
       "]]}, {
      Line3DBox[{740, 1085, 1086, 1064, 1084, 503, 1063, 1087, 1088, 1066, 
       1404, 957, 1065, 1060, 1080, 1410, 958, 1067, 1189, 1191, 959, 1081, 
       1190, 1192, 960, 741, 1193, 961, 742, 1194, 1089, 1306, 743, 1195, 962,
        744, 1196, 963, 745, 1197, 964, 746, 1198, 965, 747, 1199, 966, 748, 
       1200, 967, 749, 1405, 1069, 968, 1070}], 
      Line3DBox[{750, 1061, 1082, 1090, 1403, 1071, 1062, 1083, 516, 1073, 
       1068, 1201, 969, 751, 1202, 970, 752, 1203, 971, 753, 1204, 972, 754, 
       1205, 1091, 1307, 755, 1092, 1308, 756, 1206, 973, 757, 1207, 974, 758,
        1208, 975, 759, 1209, 976, 760, 1210, 977, 761, 1211, 978, 762}], 
      Line3DBox[{764, 1072, 1093, 1406, 763, 1074, 1094, 1407, 765, 532, 766, 
       1212, 979, 767, 1213, 980, 768, 1214, 981, 769, 1215, 1095, 1309, 770, 
       1096, 1310, 771, 1097, 1311, 772, 1216, 982, 773, 1217, 983, 774, 1218,
        984, 775, 1219, 985, 776, 1220, 986, 777}], 
      Line3DBox[{779, 1098, 1312, 778, 1099, 1313, 780, 1100, 1314, 781, 1221,
        987, 782, 1222, 988, 783, 1223, 989, 784, 1224, 1101, 1315, 785, 1102,
        1316, 786, 1103, 1317, 787, 1104, 1318, 788, 1225, 990, 789, 1226, 
       991, 790, 1227, 992, 791, 1228, 993, 792}], 
      Line3DBox[{794, 1105, 1319, 793, 1106, 1320, 795, 1107, 1321, 796, 1108,
        1322, 797, 1229, 994, 798, 1230, 995, 799, 1231, 1109, 1323, 800, 
       1110, 1324, 801, 1111, 1325, 802, 1112, 1326, 803, 1113, 1327, 804, 
       1232, 996, 805, 1233, 997, 806, 1234, 998, 807}], 
      Line3DBox[{809, 1114, 1328, 808, 1115, 1329, 810, 1116, 1330, 811, 1117,
        1331, 812, 1118, 1332, 813, 1235, 999, 814, 1236, 1119, 1333, 815, 
       1120, 1334, 816, 1121, 1335, 817, 1122, 1336, 818, 1123, 1337, 819, 
       1124, 1338, 820, 1237, 1000, 821, 1238, 1001, 822}], 
      Line3DBox[{826, 1239, 1002, 824, 1240, 1003, 828, 1241, 1004, 830, 1242,
        1005, 832, 1243, 1006, 834, 1244, 1007, 836, 1246, 1247, 1008, 838, 
       1248, 1009, 840, 1249, 1010, 842, 1250, 1011, 844, 1251, 1012, 846, 
       1252, 1013, 848, 1253, 1014, 850, 1255, 1016, 852}], 
      Line3DBox[{851, 1015, 1254, 849, 1351, 1137, 847, 1350, 1136, 845, 1349,
        1135, 843, 1348, 1134, 841, 1347, 1133, 839, 1346, 1132, 837, 1345, 
       1131, 1245, 835, 1344, 1130, 833, 1343, 1129, 831, 1342, 1128, 829, 
       1341, 1127, 827, 1340, 1126, 823, 1339, 1125, 825}], 
      Line3DBox[{854, 1138, 1352, 853, 1256, 1017, 855, 1257, 1018, 856, 1258,
        1019, 857, 1259, 1020, 858, 1260, 1021, 859, 1261, 1139, 1353, 860, 
       613, 861, 1262, 1022, 862, 1263, 1023, 863, 1264, 1024, 864, 1265, 
       1025, 865, 1266, 1026, 866, 1267, 1027, 867}], 
      Line3DBox[{869, 1140, 1354, 868, 1141, 1355, 870, 1268, 1028, 871, 1269,
        1029, 872, 1270, 1030, 873, 1271, 1031, 874, 1272, 1142, 1356, 875, 
       1143, 1357, 876, 1273, 1032, 877, 1274, 1033, 878, 1275, 1034, 879, 
       1276, 1035, 880, 1277, 1036, 881, 1278, 1037, 882}], 
      Line3DBox[{884, 1144, 1358, 883, 1145, 1359, 885, 1146, 1360, 886, 1279,
        1038, 887, 1280, 1039, 888, 1281, 1040, 889, 1282, 1147, 1361, 890, 
       1148, 1362, 891, 1149, 1363, 892, 1283, 1041, 893, 1284, 1042, 894, 
       1285, 1043, 895, 1286, 1044, 896, 1287, 1045, 897}], 
      Line3DBox[{899, 1150, 1364, 898, 1151, 1365, 900, 1152, 1366, 901, 653, 
       902, 1288, 1046, 903, 1289, 1047, 904, 1290, 1153, 1367, 905, 1154, 
       1368, 906, 1155, 1369, 907, 1156, 1370, 908, 1291, 1048, 909, 1292, 
       1049, 910, 1293, 1050, 911, 1294, 1051, 912}], 
      Line3DBox[{914, 1157, 1371, 913, 1158, 1372, 915, 1159, 1373, 916, 1160,
        1374, 917, 1295, 1052, 918, 1296, 1053, 919, 1297, 1161, 1375, 920, 
       1162, 1376, 921, 1163, 1377, 922, 1164, 1378, 923, 1165, 1379, 924, 
       1298, 1054, 925, 1299, 1055, 926, 1300, 1056, 927}], 
      Line3DBox[{929, 1166, 1380, 928, 1167, 1381, 930, 1168, 1382, 931, 1169,
        1383, 932, 1170, 1384, 933, 1301, 1057, 934, 1302, 1171, 1385, 935, 
       1172, 1386, 936, 1173, 1387, 937, 1174, 1388, 938, 1175, 1389, 939, 
       1176, 1390, 940, 1303, 1058, 941, 1304, 1059, 942}], 
      Line3DBox[{956, 1079, 1078, 1409, 955, 1402, 1188, 954, 1401, 1187, 953,
        1400, 1186, 952, 1399, 1185, 951, 1398, 1184, 950, 1397, 1183, 949, 
       1396, 1182, 1305, 948, 1395, 1181, 947, 1394, 1180, 946, 1393, 1179, 
       945, 1392, 1178, 944, 1391, 1177, 943, 1408, 1076, 1075, 1077}]}, {
      Line3DBox[{285, 710, 718, 711, 1191, 286, 518, 1202, 312, 533, 1212, 
       327, 548, 1221, 342, 1322, 563, 357, 1331, 578, 372, 1342, 593, 1242, 
       387, 608, 1258, 402, 623, 1269, 417, 638, 1279, 432, 653, 447, 1374, 
       668, 462, 1383, 683, 477, 1393, 698, 492}], 
      Line3DBox[{287, 720, 732, 721, 1192, 288, 519, 1203, 313, 534, 1213, 
       328, 549, 1222, 343, 564, 1229, 358, 1332, 579, 373, 1343, 594, 1243, 
       388, 609, 1259, 403, 624, 1270, 418, 639, 1280, 433, 654, 1288, 448, 
       669, 1295, 463, 1384, 684, 478, 1394, 699, 493}], 
      Line3DBox[{289, 506, 1193, 290, 520, 1204, 314, 535, 1214, 329, 550, 
       1223, 344, 565, 1230, 359, 580, 1235, 374, 1344, 595, 1244, 389, 610, 
       1260, 404, 625, 1271, 419, 640, 1281, 434, 655, 1289, 449, 670, 1296, 
       464, 685, 1301, 479, 1395, 700, 494}], 
      Line3DBox[{291, 507, 1194, 293, 521, 1205, 315, 536, 1215, 330, 551, 
       1224, 345, 566, 1231, 360, 581, 1236, 375, 596, 1245, 1246, 390, 611, 
       1261, 405, 626, 1272, 420, 641, 1282, 435, 656, 1290, 450, 671, 1297, 
       465, 686, 1302, 480, 701, 1305, 495}], 
      Line3DBox[{295, 509, 1195, 296, 1308, 523, 317, 1310, 538, 332, 1316, 
       553, 347, 1324, 568, 362, 1334, 583, 377, 1346, 598, 1248, 392, 613, 
       407, 1357, 628, 422, 1362, 643, 437, 1368, 658, 452, 1376, 673, 467, 
       1386, 688, 482, 1397, 703, 497}], 
      Line3DBox[{297, 510, 1196, 298, 524, 1206, 318, 1311, 539, 333, 1317, 
       554, 348, 1325, 569, 363, 1335, 584, 378, 1347, 599, 1249, 393, 614, 
       1262, 408, 629, 1273, 423, 1363, 644, 438, 1369, 659, 453, 1377, 674, 
       468, 1387, 689, 483, 1398, 704, 498}], 
      Line3DBox[{299, 511, 1197, 300, 525, 1207, 319, 540, 1216, 334, 1318, 
       555, 349, 1326, 570, 364, 1336, 585, 379, 1348, 600, 1250, 394, 615, 
       1263, 409, 630, 1274, 424, 645, 1283, 439, 1370, 660, 454, 1378, 675, 
       469, 1388, 690, 484, 1399, 705, 499}], 
      Line3DBox[{301, 512, 1198, 302, 526, 1208, 320, 541, 1217, 335, 556, 
       1225, 350, 1327, 571, 365, 1337, 586, 380, 1349, 601, 1251, 395, 616, 
       1264, 410, 631, 1275, 425, 646, 1284, 440, 661, 1291, 455, 1379, 676, 
       470, 1389, 691, 485, 1400, 706, 500}], 
      Line3DBox[{303, 513, 1199, 304, 527, 1209, 321, 542, 1218, 336, 557, 
       1226, 351, 572, 1232, 366, 1338, 587, 381, 1350, 602, 1252, 396, 617, 
       1265, 411, 632, 1276, 426, 647, 1285, 441, 662, 1292, 456, 677, 1298, 
       471, 1390, 692, 486, 1401, 707, 501}], 
      Line3DBox[{305, 514, 1200, 306, 528, 1210, 322, 543, 1219, 337, 558, 
       1227, 352, 573, 1233, 367, 588, 1237, 382, 1351, 603, 1253, 397, 618, 
       1266, 412, 633, 1277, 427, 648, 1286, 442, 663, 1293, 457, 678, 1299, 
       472, 693, 1303, 487, 1402, 708, 502}], 
      Line3DBox[{307, 722, 1405, 723, 308, 529, 1211, 323, 544, 1220, 338, 
       559, 1228, 353, 574, 1234, 368, 589, 1238, 383, 604, 1254, 1255, 398, 
       619, 1267, 413, 634, 1278, 428, 649, 1287, 443, 664, 1294, 458, 679, 
       1300, 473, 694, 1304, 488, 729, 1409, 730, 731}], 
      Line3DBox[{489, 695, 1408, 728, 474, 680, 1380, 459, 665, 1371, 444, 
       650, 1364, 429, 635, 1358, 414, 620, 1354, 399, 605, 1352, 384, 1239, 
       590, 1339, 369, 575, 1328, 354, 560, 1319, 339, 545, 1312, 324, 530, 
       1406, 725, 309, 515, 1403, 724, 737, 736, 282, 503, 733, 714, 735, 734,
        713}], Line3DBox[{490, 696, 1391, 475, 681, 1381, 460, 666, 1372, 445,
        651, 1365, 430, 636, 1359, 415, 621, 1355, 400, 1256, 606, 385, 1240, 
       591, 1340, 370, 576, 1329, 355, 561, 1320, 340, 546, 1313, 325, 531, 
       1407, 727, 310, 516, 726, 712, 283, 1404, 504, 716, 265, 715}], 
      Line3DBox[{491, 697, 1392, 476, 682, 1382, 461, 667, 1373, 446, 652, 
       1366, 431, 637, 1360, 416, 1268, 622, 401, 1257, 607, 386, 1241, 592, 
       1341, 371, 577, 1330, 356, 562, 1321, 341, 547, 1314, 326, 532, 311, 
       1201, 517, 719, 284, 1410, 505, 717, 709, 739, 738}], 
      Line3DBox[{496, 702, 1396, 481, 687, 1385, 466, 672, 1375, 451, 657, 
       1367, 436, 642, 1361, 421, 627, 1356, 406, 612, 1353, 391, 1247, 597, 
       1345, 376, 582, 1333, 361, 567, 1323, 346, 552, 1315, 331, 537, 1309, 
       316, 522, 1307, 294, 508, 1306, 292}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
9ymB6JeDovqeSRTmAULYkHxqX9tuXEHOEfkruRf2+jlRcFzurcLxWhhv7lwp
IEHgoFcf/fTmCgjEOn0YDq+Ci+mmWd1ROqS/fVXaq16Ewyt01BDXif2nb+wp
P0uDadO7O3PDpdh6wlFZSbsVQr8LDu3YREeqdPsy4xWlmFpQTWwxb0F7Q99m
DXE6NEV0K0YbUzC19grbD8tUSpPZipzYdgJ7nORGcrM+oUZbd/+9xjBUHLRd
p32ejjdUw0QWIo4StTJy8a5rO+Wyz7pX3N9pYFF862uxUIKmcn+GuC1F8OT0
++2pSuDy4zRDtZJWJDhvYt6kUAqXqTcMASx0hLl+tmXcXYrt4qE6VxnT4dS9
ni/VkayXH/z+ks3l2H1K72uKTyY6/RONEkmfPpap/NT0kAkMDE5+WK1jAL6f
hmeqyXzbRV+ldTrdCNsnL1wdP/QM7KvZv3wi4wkfjWZa3iaj9XamzwXrMihY
1bxqtSXnywJl+erpLGzNnjq/+VA7kuQ8Nrl+pcGS6an0X33crvIm+q9e7kl+
7vZXJ1MPpeYv1VQjyS/H5siNZErmpeS7Py4RsPt0+djT8XqcPpxz8e9eOYUu
b/53n5wTGN8W+KgYqrW7p0VOpoKTtSFeivRrxK/PdcqpRgiwH0xqLHsGjuwN
Ua3k3ynTef4DR2Ur5ZFQ1GZHxg7Ked+KfX2HqdBSSFVPYxugBFMHKHscBijJ
p0KrOFoHoFv94cDFiD5K9LSV9UGRr5SfUrGfg8qH8MRr1p+7qJPy/aFsXcT6
PopaySVftuIRCIRL7TBN7qFIXW6/K3e0jSJsxCiv934MMVLFJaEG7ZTFB6y3
K++XU0qr0hWJ1zSonPL9ndBcS9FXpnzizK6muP0SGqK70XH4a7PmLYsSikJW
xYeVfB2U4UizqkumNNQJL+4I2plCmQhLtFPpraG8CbwSFS9IYEY38dtTiwHK
xx+zc4IdgxR91Z6cxt99kHlYYOz9Z5DykiuhzXLnIOWAanvSR84+/Gmg8jzr
LkMCU8g7WvwnjEvYyDO20SDxy+LmjpelpO8Ty917NR3b+e87vSH18OFlJSqb
UowgrpTcWWL0DHrMcTf+vvdh3a/DklUtlFmZ/Hd8xgFwsdul8cuDDnbBeSFN
mQpMGo2vWrJuxzZ2qpWaHg2sjh4ea9xKcGfzg9NX5NPgwGq/LNmd9KdhMa9O
uRjimtD7AZHHT7E9zSG1k/z9mJO02luaZeBv/WbKKPAJVlNdE5IEDdvFdFvt
G8ow5ec5XvA+Az5tYqPWpM6sNTu4LY38nZOmjyXj2/SwzWX8TBf5O39K/tA0
XIopPL5C+oVWxbiuelW5W430R3Pa002i5RR7X+chsapGiogms/VFUt+yrf70
lkXwA8Vn4cHJ1c1nILjxnfA2sv+b9LXzLF5Kw4DZxosZfRXguda6ZED+zrJZ
KYew2CyKlZDBoOJFUi/bWYaHxtERs5zTyw3FKN2mqzE704ypJFshdi06fIze
Sj2WCAUxTV04Yt4FhpjsJsXbNMSNK13I3lCB7XlXGMWXtUOaaYt20lsaijvz
dHySC7D11+rIMyVf4BjBdGQdJxVnbi8rSkyvwopPWZnSuzpx78IzF/E/VASL
a20bWl0OnhMsD5HTC1/7sufiUuNQ/Hef0v13nyr8d5/6zch05sh4NRzHn5i4
LetCDJek9db8//3OIjsibepjWoPh4COsh9f2gc9hR4LHwBiCGVTMKcXV+Lgi
U0PWoRN9eTy/LTupEL0dUsxysRZL5ivObJfthXMHx3thtnFIyi53VB6vQumJ
I/Iz4R14y6h03WoDDfTrPma2t2tRa3lnx9uTX/Eg+OzYGcVxHLoW1d5YW4nC
aI9jPDbtuJV0dlm2HFkXR8WyznTWQFYk0OJKaw9YFqsOaZaPI254ho/rZQXU
XneVbBJqg3vQm53lMTQIWTnEf5yphhzLhKjohc+kzgzfJS5EhRt33xZXklvv
5Pe5oaZWvK18uvPMLxqGGkSfd5RXQUhWJaPUjXxfd28bFsdT8UBVMmXqTSlu
sPEE+Cq0QMMsYv4+2eepmRVUWdVKyL1hz2+r7YDGMd9347to+GMr1LVlsRhn
k8x1Qoab8FKl2ibVgQ66zGMO9+xatBkKqGh9tsCZonwL2bOk35+TU45SbMDP
rFr9elMyj6zOc7BX0pG/n+1i79pGvE20X/3AoBYpPEL7Wi7RwTVueZuzqgEu
I27zL0aaYLzn6oD6IA1F6jvERfrqcb1v2zHluBbI/NJKbEukgVZw3lXWsw6V
Vb7Xnxq2gtX2UD13GA3DH8Xf+jHXwuiXbcWicyvEV0gWLGXQEPG/3INYZB95
ivlWomh91VMzvRbUjm5UEOKg417zeu2L5HwRmnSp22/ejES9yjiFq3TE9Yaa
i7CV4Rm/tNMu3SYsu8Kk0mBLB+Oxk2Nz90tw/c2ZnSPvG+A6EtWSl0fHNV7D
8YG0ImzdszL8ypk6lPX59irS6Ui7Nvay93IhapSyjeSHqzEnrTpXQvrQGDCw
tdzLw73zB1cPBVeiqlBio704AZvfc4HW9zohmbn9AI9SMY5leK68comGKTQX
1q5ox56nHxbs91Yh/eAW/QWyX5UVv1zU/dIKz46oZY9v1uH1n559bl40nP59
tLV4sBmc31Z6q/g0oI9b8PZAMdmXjgQwXd3cBI+tha8SXzSCKWE3S8oMDS9+
FrTVjdTBiZk/TEWuEfqWYTt6D5F9Ri3yuRW9GmG6wTsm7RrglL9Z11ONDqV/
96CL/+5Bd//fPWjw+IGndWVgSL6a0/S2FmZljRMRTaSuO3+Kou1bgksbixhD
M6rRLer/7CYDqQ+f3u6k+haBer8j2Le+EkdDtaQy+Ajgl6eGlmcBdoWU864a
KIcpq0dDmgwBkZEdLo9v5uKOdIfIlqVSaCapmpqSOqr0WtwSXTkLHHsEN3kd
KQGfunK4IqkfugeEfz2ipOPHEZMwK8Mi5FLeCQyQPjTwvIfBnqjPSNO/dDRq
ZxWuuOjHVApToe8ToLljQycCV3I9mxGoQaH4a+HRMSoatu15FjjyCb+ya0zS
OWrxfuwx656XNOyzu8A1zd2CsBXHJazZauH5s89klE5D+qCi1jLDRkS9M+6f
fFyD3BfHwjfK0OHSpLb+rUQteDyKmDUkq7GktCo8JZCOXHxX1YushGnaRI7P
V7J/BHAsS+mjI+nfPcjhP/cgYnobj3l/Mfa3Hxoa9iuDxrdm9gYyf3yitnY0
H6IgOTfwu+54CU4uNTopaxKYcHI3nDuah5n4aqk9l4px4cWVsBvk3Pw5YjA7
nZUFpfxUzlAVCm44dcqlBpK+kqv5Wl96Ot7WzHdUq+ZD8+iYgHEqgQAfVq3T
nKnQ6lx5ttIrB1Us3uu0Sghoa+uYHfiYBIufibNl85m4fWRYVKSRwPza/KV3
nz4jT4jB9NXJGogda/pUxEbFB1Pe/qK6Dhzls/91vboau+Sd2CWWqDA7vMDH
cf4ThIUFNr3uqMK7XxHzBZk0CL5ZoyZzpBlLgUL2co6V0K61eX/lAh1Hm9Lv
F3DVw+znwcsrVlTgV1PEso3xdKisFl7aGlaFvSYWrN4qZWidTefFAh3VFaGu
Lb1leOQX4LIvqwQ+2QYOm0RI3/fvHvTg3z3o6L97kL282+nc04UYtVVQXZov
BEvn5kMryLz6M1iw1NSZA5ejOg90GPMxl2cklh5Ozt9lvfTr3Jl49Dw4eFQ0
B7MPoq5L5ZDx5jeLUwsktwIB/iPRmaCaZ9GOV5N5WKkfEXozGfptofyNUunw
LSiztG4j4DsrVly8JR6nyr+Yfd+TCr7yEyNre8k5zuM6H3MmGnXfKj+9OpSM
3YNjYc+GCDRHBHUEPu/G17OCdQbUahyTLBoU06Siz0zxoPmNdjw6/LX+6o4q
zPo6K4sqk31DT8f1ZGoLdj2SUxzkq0CCqKTs3i10zIZm1dmdaASn9vWPosfK
sLSLsoIziA5uivLpO/Pk/JVKr4wVL8G6JtfPbUt0LGv9rsgRXI4/hNnyl3pF
iDe832h8kUD1wlHuQ0xkHWrtD7igX4DvNyd/vDchMPLvHmT+n3tQ+0LF4kfx
HOxj9y6uN86CxpZ6WznSdzfVVEuEX87Abx7hs0pD6dgpdIz3VBWBSO/jr7tm
U1BhYOpK80rFzuLVctykT2k1ObjFRCMREZLpiietkrG2TOu2KemnDm7JV7tX
G4Mj/Zc3SVxOAPPPXd2HR0h9GKSa9mYiAmstk+T3TcYgdFTLe5JGoEC+LkAu
IxSvTOP5Zmcj8Zx6y/7yFKljb87s2ireienT43Td+1UYWq5nED9HBdF9W+fc
yU+obkdVZW05Nl6tMPtG+oiD9x98O5zZhA5bWaO7pN/pe79ClsOanINFFrfo
9rV48PGr18j2YliphTFMzdDB0Mvd7xVSgcr3Xa/c9xZCaleX5DqSp9hahdYP
ZP983eESNPMyFxF6zXOxrwmo8VrWnPUuBP/s/lUMZ7KwamuzrHgYgah/9yDu
/9yD4s7nddKIdDR4sF/xGE4B78Pn73WbCCy0PUhjfpoCnTbfwHsmSTgtLD38
/AsBzXQFx7atCSg4m5YTFREHWeNjYlVkvjX5n+AWl4+Gi9va85ZS0ciY+5T5
muT26+JGapxBONwOB1yvuheBNUuhDndJbgM6q6N+C4ZgbmfttaGiUHRrvxf9
+oMAH5oPu3N8xHHdqemEl8EY25AdZviL7FeZ/lv8otqwU3XzEQOOClR5//gt
5U8D76lG/qnWZjz+Gvsl6lQptI06irbI0TGxzDh+8jDZB/SKnlNCilCfl0pj
6qdDS6VO6WB1JUpMz+WnZubjJWOje9oZAulrT9KH5Uqh73tv/EVRNpSOn7Uh
XhLg9WJZXm1FgYvQ56rW2xngCEjlZ4ogoOXxkWEhJgec1xd1LdVS8fH5+Aqj
YgIC/+5BJ/9zD5KTuhjDgRTce6WfMGgfB/1XYcnW/WTeZgUl8prE49Xw7JaW
71HgVMjlUx0j4GR/6meJcxTq7Y/e/10ajiYB+w1eE2RdMHuyWb4NgwHnWp7l
60NhGrZFgj5D4Ivs+g/RYsFoWeesrmgUhCT6c1sGktu7xkwHxb0foHhBsoDp
yQewh6x6zj9HgFIs7eGe443PAb20+VEfuPYs06bMk77GTEwsZawFQ5onGulm
pVjW5pc/eoSO7o4QBtMOUjf8DBDZ7F+ExYzdu2VJXWcg7f3El6kazxmrh4X5
yblwqtlQgp/0X97ntZ6KlqHTsuJ14WAWbq28INdtRCDa4me+z90iuFVyzvcg
HcV9bcbbyfwcybpwkPdxLj5f/b5F+WgKzoiQLY7k6WPR5rDvfgZ+nByZ23Qy
AUXHv49sJuva9t89SPw/96D1MilVaZLxqGK3Gxy9EYEr+pzOSlQC7/194zuO
RKHVO9869HooWgjJOTkyD+N2s9q+YQ7D55KTFfpmQXCs+5BmNEtAOTzl7M1H
QeD+xfjkIsmv/bHE50u/CQT3GtoeGvOD/muWD6G6PmjzOyhwmuS2IbNvxZqX
XngW3aVqe8ETfpfntvkuEMhc6FA1/ewOuU/f/xx3dscO5Ztb35G+jCXdYl/5
2Sa8Vel+0fGlCM+/rIv9EUNy/uZArRWvwbF8OR3FC/nQE6x7YreT7FclkXkc
vOVYETR8hDE4C4+Zg+6Na5O/z2ew3GepCEIFd/R0C9NwpGukqYWc1+YxY2f9
ruXhkFevYZtNMvadj1TdXUTgAevaSl9aBj5KBZw+kRCHiQvcrV/J+VJ8IP+o
TGgK1EdWXnE/F4VnzsYSG76R/vTfPUj9P/cgZ2OGZ2t2RKGDvdjrREAwVvhu
mb89TeBAysFYh/ZQ2KfLR0iKBcDp6+ji7Z/kXHsycz6jIhDJZVrqPpy+eGer
vnI1mYendjE4GZ70Q+yb/GoXL09M1Nrm95A8JfijLS3SPCHbuuGkVog7uA5u
sdhOcmveMhu+jNUdQRMbghskXLD1atWKX2Q8z3vuoc4xZ9w8nf6HusYRkfOX
i1wXCdw5/XRQxKoWr8P44mpz83FtY3V72FoCt9y9fpdxVSBtr/nuwNIsmNG3
R3MpE4hVeGgwnVoMloMeZROhaZDV7RCc8CWQ3xVKXJbJx5rpVZzKp5PxVv2n
x6GCv/tkOTVKSCYUN5lt/9Abi0a/hWBvst4PylYoLGxJhYqqHv/hq5HYWHm0
LZ3Mz6IGnfLnf8g5buS2cadTKGZnOa1ekDwd/92DjP/dg7b9uwfdqv1eEkny
tPoWruG82h82oznR9STP25erB496BIJBiUebYdYLjMsuaRmTPFelrQrY+MUX
nAzutdwe73GUe4vrGTIPE3f1fYiX8ERlSdOvt1au6B3qJnRIbrcTdStF3N3A
a7/zc3iNI+h77636e68cX1lTfpbPCbuFQs9mdtjB1jx+bTkZX9bad83rnh0U
XkQuWdvZwH7Hh4G9SwSevtyW+2xNJY5fM+fddCgbz5cnTq6+Q+BaxYZ4nScl
yDsodN+8Lg3ST55xzbkTqPiSrMqqXIAVcq3CA4LJYH+vLH2T1EUCAcsLdmtl
4dcq8eNunrGw6Akq92whfdCtmbblUanIHtpzYrQlAlb7FkZLBgicmdq85UVB
AlZmee0b/BGCjUGfTu0keUY9eCCWkB8FPusDO1ZGfIS3eyh7McnT5N89KPjf
PWjg3z3I17LNWCEiEL75NvnWlp7wuWG0LpnkaWEXvDWnyhdJt+J59Q+7Q/h5
SqAByfPBI2aFtZs88fuxhunObmdcf+5kFUDyTOEIUjwm4wZvU3ZxRWkHuJ3V
llAhub2gzjVsc3XEqE3kHZm3ttBtET0xRMYbRno2dyS9AeP6N9e71K2geDY6
/RzJU2Kl2nftUiuMaKVF3PAww86Nwvovybjj8bzLiXtKUR3/4v7Lvek4b2v/
4jqpP1uvdl6UfFGIo3+E25yVkuHXxrfQlU7q8HqOsRensyHn4S5xKTwW2ZpE
Mjs53wM8rDQSxdIwr2bKnpkSAcO1K6q1yHnk88n2qOKHROza6Xg3MTUEFybd
lhuQ/XNrNt/mobvRaDryaW33ZAC+5qluNyZ5rk9zTfJRCsOdufxZ2XwfzJSN
J9DI/NT5dw/K+HcP0v53D6qmmMfyD/pCb3hDbbOgG06PTtu/I3n6bdE+Ys7h
iRNjLz97MzgBkpyFmSTPdBats6lCbig4l85n5GyHHm7WzhckN6HenkQOcUcc
vXg4sHzAGpTdN9TmyHiUfeuxlhtv8PTbh/V+eRZQveVmIkNyO2X0Y/bAAyuc
SwsW/lrwEnU3gtkcyLhW/wH/1Fuv4f778fN6f2O0G41TE8h4M9dKiR3mFKz/
bPzTISgZDaY/Vsolk+/395R+PUcO/H4XTXdNxoJlU23ZyXoyb92DV9z9loYT
yyfKJOsjIJhw0LiS1OdX1f0jspyTMDv4KiQnJgTXxGIYnccJPGqQTj22MgY7
Z4pk78UHoJ2rWn6RnEctD68suveEIWDQdHJJ1gd2g89q0kmekd9+uS24BuFo
Cr2edbUHInnTDqeQPPf+uwex/uce5JbROeXC74mZw5/dxvLfIpww7SwheW4t
rGxJPeeGGM317atl3+AW56KKHcmtP/zqmQgBR+Q6Vxo3Zlnh+8yWlStJDmwS
8uZKvG9AoziM73Mww6/QSx8fkPFrFm1X9++2Qvw7PzP+ZFOEubR6upHxzkFV
Ae76V4j99cdTJ90If16zDKWT8f18X08mHaun7GX7/vmjTAtF+OrzrROVNLx0
72bO3VNCqWkuMWc9l0wJ8FW9kh1AQGGX3jvvJxEU/fAzhpFNxRiXstq9Koac
syfZ6g+dKIL2NYf2Y7t6kCFn/kjlORXKubPmKWfLkfbG9VJN21d8O9wn8sFh
HNb/9oGN//aBUv/2gcWXtc96+JA+s2XUkdO0CwdufjmUF0kFw9IJnrjT1Tjo
Vlwr6teFRYuxTfrhVORE+jmzjldB3iqGeuJVF9qZeuLfJlFJvRMbsfpdFUJ3
rw3W4OkCdc36+5mVVOibeA1YbazCuvhQTSv/Tti5LlOtGqcie9pdMfdlJU7K
PDkUM9ABVZWD39m30rA1fmVvTlc5ijdv6jvnEkCpzLlCf2NLgF3tT7hCWwXk
/fMUPM7k4q2LAL3kBoFpmUHOB0pV8Lu0tGZBqgYV35tWsWbTERB44c2RHRWY
X2GX8CqsCa1iwlrx6nQccbioNtVRibi+hftR90k/PbFcL4hCw36T6EAR9mq4
zt7RKq9qx3KTeNfrZ2lwX0mTGWmthsvyEQ7q5U5MLnec3fKd+v+/r5b6t0+T
+bdPE9il3HI9qxIiA3ce9R9tBV/EcianKRqsLGN2Cjwj52zKvfse61rBrOFl
7rWKDtXqgW3ZcuUYmpc/WVveglqnUQ7DXXR42ewudFYsg4RJlIfd/RZMXWsu
3HeaDqfO6RhD7VI08tvsC6lqBm933GjgQzryLC2C+YxLkNYewHxxazNGNh6u
PmBGh+CPNqYnr4pxyO58ouetJjyt/iiZEELHk4vvTsuf6EBfs9jhxaJCeH6W
lOf0oEHuO92fw/0THALOe/WFVWB3g83CbBkNAacG9tWENyO9692NLZ41WFUX
dCVkNR3aRNDvPcebMCQVr2l2pRH9Wn+4Ts/Q8IwtQWk/XwMkSxdNv99ohuDk
n2Jb0vexbZY70vegDvwpVgVZj1sg6xLV4tJMQ/DgPda91TWQZThFrVxogeaZ
d4eZybjyv33a1f98X92Q1rJguKEcky77jX6n1EHPwqQxK5+OTImFsE13SyHp
pDT4jaMOcnoLr/Z30iE1EMMn8rUYI5KCbMPXazEZKOt0e5KOO6/jmsU9izC4
MP2oRKkGytxP5oPXEFDfuJ1TqrkQEVzRSrPXq/Fr085Sxz0Ekm4/PHUuLB/l
674xrNxWhY3LGgpYRQiomLRZc3nkwu5BtQVPYwUKrwfFDMuQ/uIypzYb22fs
uFx48rRJBdiNe63OGFKRWq674ee1Dpi96ylbV1AFIcOJixm8NARtVmZQF/+E
Fcyrh1pLa3B1e6mRxgcaTjNuLLNraiZ1TWm95rU6eHtarfw1QsOl7rLThpGN
2Ew3Ko+9VI+YY1dWyOyhw+/s5LpVj+pw6PizMw+z6nEh1O2drzQd/uzyA7f8
qxHF86ynKq4eHy7MBHsZ05Hyb5/m/J99mpLoxVgrkRKwRyQcfPuiHNK6P/IF
hQgkPPo1sfdOEdhazQWjYstgWnzoWTRZj699vu+dfVEAtYJbtNSmUuwzGJzm
VCf9hdj3yvW5uZBY6/vt53AJWgSKrvWbkj46iH7CSzobSVLXXpVNFGOKwsZT
/JbAoMyzpIs8meDcLb68gVaEx2lLGev9CLjuvs6z5Wg6fqzVXbeiggK8lH75
M5Lsh4M3/5QWfsbZyLCkVvtqXDpgzL5xFxWERqxga3kHlHmwa0i5Gr+TX6Wq
rKThBH3zp3yNT1hekbnx7PlqJCdJDevG0tCwyGXH79OMvqfsOuKkn/O4ZX1s
2246THIXDefNGzDR7bd22r8K1nkvi9NIbvzPLrrLeNdAwr5Jrm1ZFQYqL/lG
kf1nYa9439j1Smx6EZEtJ1KJ3RbtNqVUOq7/26cp/Gefpmr5c13TZCHodIFr
dfuKUGW0yL5kReBs9w2N+2fyMBch9tXIvRDEMcGtrt4E/tTqiPTsyMa72YDu
TQP5WKriy1sZReabbtaVlc8zkFSqHyp0Kg/HGOPkA0j9M/yQR3P3wTTY3T4j
ZuuQgxeSEz2spA/y1eph7OVNwcdKNnnuL1lQ++Rzr62a9NHJvVY3KxOx7CGG
GQUzoXE2hHKG1J/vMyzsxQK7cfZdH/VRfjX0uDxHzZWpmDeIOHc6vh37stXs
Oy9UoXbPzX2Z12mI0F9uVHWpFTO/rr/bNF2BOu8zuPCLhjsbijUk1JvQ7pEc
uTuvHIkKT7ofG9KxynpSx+tnLaoQvprJpQySmS+5OevpuM2VeymZWolfHcJb
hdRKwU5lzZNnI/MwILt7tVMZHvNrbfQXLUEEU//RE2IEqP/2abb/2acFrdH9
pjqRAxfGrhc1BtmQVSW8TpB6Rke8/4uBTSa8LWVqeCoysXfi184oCoHr+aJz
emFp2JGqtYNDMAO9eySrP9SSnKm30pNPpkDWQ3XD/dw0JIcrWLKR/vG5if0y
FfFElHx8NTcknYqmY91/YnoIbPvh7n4+LRbNA3tDBaaSMbR1RLeH1O1s+g5u
AYFRqAjc1M4hmYTDx+hSP4YJMGfWnUt914lzw0yBMzpVSNa0ufR1lAq37mTW
mLJPiGA7Lx5+rgI7n+ZHVBbRoFWz5kuKVTPoE49U/twqQ7c2e6SRHB1l8T+M
517U40t6J8uvgBLorY1+c7OGDkJ6Pn5vaxXy2o9fuU/m4eCdm769Wwh8+3FQ
cNNkGcSq2M3sZCiguDywkZAlfesLaeY9mcVISPer/5SeDzbFGs+VZqRP/LdP
2/+ffdrGM1N6M04Z2NeXW/sxIhVaC2uZuEh9eNPlzNxni1QYry2S6dyegpn9
HJsFOwmcv1PQ/OZbEgIcWIeW6ydhhlWxxK+PwMU+uSF33zj8eiV+qKQ/HgdQ
ZLSK5CMteOR862wUvi7nNhS1joWak0rtClKfb2par3elPxxNwtXz6tei4W/f
ojVFkD59t+tIOEJh/OTlvNmZSHwPM7RjI3V7vi39gcvydjQc2ip2TLoCw6My
52TtaCh8fJ760KwFXXGa/k/JPvb9oXvGK3L+2nmH6yjRG3A8KtvhWkQxeF4L
dnqTc2dO6BBzflM1ZuUDe99bUeDY8dWdnYvsV7a2uOlA9s0fy1WXC+TDrO56
QvZ9At8dTBi4fxcjLtN99qU4qaO/RYwZ2BEQT0xPa2UtxNYDfM2x8WQeeiWI
jpH97cS/fZrof/ZpD608OMIqUzAe+EJPNjoedwZMFe6TetvdQaCH8VIivNZ+
XV8wGYM3Ft2/dpHceKQ+HiztisG5T5bjIfZRUGuWihkguX2a0bvXyBMJU4X9
NqvkIxDzWffS8UkC1tu1PyWuCoPb3GatX2phMF+pX2k0Q3IbV3lyWjMYxSJz
3EIfQnBV4wvj1CwBNeGu9GjlALBQlD7lTgVhrV4W4xfSVz6bu9CtL9OKjRaN
lyMbSjEsGjIcuZWc10eXkLytCcdFS4OtJYrR9+jbSH8sHaH7XpaLlNXgpNom
leCDhdi8JW7Qbj2Bvr6z7KFHK7DFQocpSz0XnrnrR1PuEfiZr608Jl+CDKr9
EU6+LAgUeJVcJ+eIW7zuDm/NQgxHcn0ZJfPzQeE5jU9xBCKq81/7n8oBu5ax
RcVsCn41S7J/KyVg/2+fJvmffVrRj0mmmuMJZN8a5bt9JBLTTDwff46Rvo+r
RexDSjT6XRayQttI/7fpvJrMBIErrTWx1bRwJDN2rxepDMEhlW8Wp0huYmfX
UB9WhUCzjb7PbzwIVtG9PzhIX9NNaXFKux6Ir8x6ytVJAbjNrMhy/DepQ0Qp
DVXf/SD9uKb6aJ0fcpzNFP/6x+aATQd1TngjbGKHJsMpHzSbs1//NU++l4+z
F4NCmyDOsf/+XqFirPyTziTrRwdFVDX3km8tRmycyflRgKVrzX7cq0jfZ6bn
FlJXgX5BBTvF5znYkNhyNZesd2ttl9Ca6hKoL9t4b24yA7QmoXdVDgSsrmRe
GaYWQsps4yLDbCoG+E99uZtA4HOhLrXOIAcXZQJO8usmw/ptItPzCtLXf+z/
Ev8jHZ81Dk3NO8Zjr0QQLbODQNO/fdqT/+zTXvTdMc8diEKguqt5y8UQ3J+4
GEwWME4pyV+x5QqHP4f/2qPugTj+x75gNZlvugOicxL0YKxRzty/evsHLJdV
DYkg8+3wQ+Z+Ca8AvPd/W7Zysy8mZaWFHP/u2WLjj+/h90X5+5OFf555oTti
lnuc5NbnZPJb1tYTOyQP7RrZ5oHXzSimkf4xXmXX4S9G7uB/3lUgzuKOSPV1
LvGkf/Qw6Luifb4OT1mqvfJ0C/Dm+Uvny4t0PJC2Seu8VYmnAzliykw5sBJ8
o7EgTZD6tOKHHH8pbE7oDBRcykB2kNXTWrLeewqSju96RcGasJZzWbtS8SY0
7ex2kqd4i5zRVE0OwteqGAtMJoI4dKRCvJLAoVQPYbbdGbhYnSD44lUs9OYm
wlm7CMSMUs2oMik4kNfM/iwvEleqTW7v/072n3/7NLP/7NPab5b3tr8Kw+Sq
7RcV2D7gsUDCxpNkHhbvluIWkQ3GnfZL1rXZPnBMOfkhlMzDiz2a/ZFKHzAe
08Dj0eGJ7zv4CxVJbvdTfO7RFrzR6LL6ZeGD96BGyocEktwYuyYSq+96wJXt
o5iQgBt8PaY7bEhutr5HOqOk3dA9xPE0KcAZuSGlcgdJ3/1BS6/3hIcT9gd8
Z9sk+xYDzu2OIWT87G/peWfSTynE209kt2aj0oNPq0uKwI4TG32fWZfi+rZZ
j220dFw4G+PuRPrEgDMp5VcXKAjetIO3OTwFSq889x2OJ2AzvifNjzcXnZGc
IeVVCcidW75BgOS5bIUhlV0uAz1i/Z9P8cfA1fBgnjnJU/6L19dU3RRo+mg+
8LofgfS4wuhukmdPj19pgVE81onsD2njCYX9xc0X+OkEXv3bp0X8Z5+2Zn39
yIWsIEj0nw5RvO6FxM9qjVfJPHQW20UffO2PkRMZb/zs3iOUXkQbI3n+fiCn
J7vbG4x3cg0/87gh4fzLWHaSm3ZFUd+QxXvQpnmCDh93hsS1LxMDZPwmz5v+
Y/MuaHkYHB4a7wD2fffqTEhuZY38jcaLb+E79MhwJvQNtuQxrRwg4yxsJduz
e97g4DyFW5HRBumqkQePLpFzn/3Qn7d5pTgqdWt+Ii8dWyMkij9ZE+Dky7Pl
ESiChm70wXiFFAwteqw5QfbP8KEnx9NMc+G3z431GmcCxD61V1aR9X6x0s7g
kk8GKjRtFPSUonHv+9PzZiTP9wnZ0U+8UvBbo67F6Hk4Zob2XecaImC8+VL4
nqB43L3yMGDoZAg2lqrzu5A8pbeysBBXo+BD39oasPwj1t3y/yxM9k+Df/u0
nP/s0z4NPd9ELfPDpl1xr1U73BAuP7blGpmH9bJBtIsmXuA970E5zvUOxl3D
rxRJbjon1RrN+twx9U2k89vht2g+c3d0D8lHgHXlJpOadxi4aCPwqfUN6jS2
/okl45/LP8TVdTmAl/KCa81Pa2z0fZOwluTWosvH11Zqi2s6aRftbCxxbNm5
FTfI+Mafg/5aqlZwZXX8tqflNVIvbDO3JOOXvk9/zeMvgv718xfUN6TgqqMU
rYPkabxB9alnai6efz62mBYeD/plgUt6JM+HmSU+j6szwLz92+LdL1FY94h5
2X2Spxd/tIhefgo+qMSLNg6GoaiQecVOkmfGnunc8U/x2GmzwdTQNxjaYjS/
ZJLnsoRtGmZPorDCb8qOq/ADgrorV2iTPK3rt/GyLg/DrgK72OmzPtjnafT8
DJm3B/7t0zb+Z59mx7Y7vGzEE1p1e5e35zhC9+Agjy/J82SJ8e8sZXdw3s73
PzJjh/pF7+3SJLcTe2qOmvc748Y2/oz1hTbgrfvE2EDGhePK1z1csgcHh35W
C6MVrvwei+cl+ZizPOHumLHBTfDu3qFkhkMajyzUyfh0OcHtEmiJbUcupulp
v8CiQ57rezLOqdPCOHO2gDL9wDXZ+jAFTH0t44zvSA7/vosO+fdddPW/76J/
/IuH/ide/vCQy9DHJPC3WvypGIxBVu2qnC9//8/03qjAVPUAZWfOtS/DPl8p
fpZOLFbD38AYwR55urCLciW2R+NPeCfFSsRJV9dzDO38u/5YO32h/NFwSHft
qqMk/LZwUDQah1Gf3eIq6QZKSkb/Zc/SPMqcJlf/g+90tNMFthpqpFLUJDe7
vSJ1eKoH3zqjEFIP/C9/Z9JwfZgcYxmUr5joic9VI9zu+cMwOh3CaSIXUtWz
sa84uGrxfid4HcrPJD+l4Wtxqk7n62Jon3v2xy+/A5yvlWNm1Eifq25lvTGl
AnHdLC4ZI+0osxV+v/4uDVVmhy9GhpZgMzHm4ZTcjK3PWp8tPabj6c0p23H5
eCQJ/TIU5MijUKc2LD0pJ3WOJFf+ivBGKHJLq+3aFgIcmzmx7g8d0nt/3Lbu
KoKhqZBMDXMGfuyzNKT83WeKJzfJkv76Q90mE/drZWjYmTrme5+Oi7sDDimQ
/uSw6OVp3YA0nJaRsPzoRuDdcpdSF69XCN1+5Ygh7Tlquu6ppZLv/WrjGOPQ
KRN83ZMas3NWH28r5Pn+fm+f5RTcyulrjHPr6lQ3q+vDisX4cD0Z9780uQO+
hTD4seYVw7pO0HyHFg5o0nBtk955n93tlOkXT9cyxLVTfjD3bOBrGIdQVBJz
k3M/5a145NedDl8ooVeTrOJvDOErWE6nsH+hFAlfbB9+1k2Re1SavebCKBbW
2YiG/smlBJQx7yqor6FI6xyzSNhG6rT2Or1nEnfxQ4BTduX+Ekp/oJ/qaXK+
q+TIHo9gaqa8d1o9GvEkGV2av45nV9Jx7KDC6hvJtRT/I0vX/Q9mQFU+Z+7G
HgIa2hahSRs7KOfeJe/N3NFPSZjsT7MwHIH22MYXvKMV0Oh5Gupj3YmsRreR
VQw0hOU0BrwXrcalTqPPdp1dkGaxXXnZmwpeS61qsZU18B2TkJBm7MY2ZutW
eSsqJCv67ih1VeP9NZXpet0uaGUQvrciqOj6xTrSuroa00uX/kTLd6JmMPL/
1HXl0VR+YbeJQiFFqKhIokJI844yFlLJEGmkkmZFFKFB5jkiM5nneZ7neUoq
imS696Yos++0vvutby1r/f49a9U957nv+zx777vPVvZjeASPvhx15autwCqd
/A1iU+1wv6nywP8YBVFlDAZ3VcrBLrFohdnVNlx91hKUEEpBa93kyJ+gUmjd
p02vTG9BtcVrIeHFVLip/7bp+16M5OHdipxzTVCLb3u5lDwPIVdqnr4zjYdA
wq6nl6SaCiZOCpReKqFi7UPF4ykfqtGpc1Di8o96lMQV+xZpUOH43Wft/bka
ONVdvtc30IxDCbtVTYopuMvHxmr1sQYTq3nDf9i1ot92cfISawrERpXCXH5X
wzOUveDT31YwqrQnSZlTwL686yyHTxXeDu3cPxfdCssU1m38fhTkyZ899mis
ApXTnSVlPS1Q37Z+3qSZAg2z+XRN0XJYbvae4ixvhvHugQEGLrKfnOV/hQgP
r5zxmP3+uAmbfnQeMdOjgvtiRv0982IkWpZfieNqhG9L2V/FICpMzR3kLsYV
wqEuVfelZh2eVUTu3fuFCo5p220HKHlg++P4y+1lNUajG8sS19LQq7Zbbjgt
GwHRN+8faKuAmof72QNHSd/Yc4ZnnWErDCRWKxxKzMaM/+SV0K3kc1Mtn67e
2gbZj365MtVBBU+2KUucFKPi6FGPk01bW5BpFCQeIloJRYfMip1UCgRCc1at
TGlChV3gnPjxejTuCd+zvJ6CeaWayTzpRpSV6mSpvm/EdjbxS7GNFDgHiTkY
WdXBQ1DotMPWJvCZljJdp1HAtO72q+ykanR/l+V4P94I6huK445NVDz8MPVK
hrkSoUNVHgxnGiGoVcjIokvFubxLLyScyqBaq3taoLUeFXpnS497k+dBqPD9
vkMlMOu5sHEiuhaPPIqELjRS4b/z8+LI9UX42qai9VqrGoysKjdfMBBe8Fzs
m5VGPvbJnGVtmqiA1OnmIV0pgsfWXuSMrMjG+eRO9oCwMoyur39yR4+Gr9Zb
HqR5Z4DJR9It7XoJuKVVuiaf0DC+WzNQITsVBy3jIp9qFGFLUr/bC18aqhtV
fV47dCLOvZmrNbcMs32c2hJtIxiO9N16TvYzfh3XFHhWmAO7jimBNIzg9yX3
oinpdqwRoDz7cKIaJ7MYJaSUKHjdy7OoWKkFqju5j758Xou5vbY5c9EUVBcs
CerMbYR/vftoLn8dGBcv+7ByGRXG2S9KBlbVQVKtOPBIcC1YZD5uHDxDxeMW
btXrMuR93zDPdPdGDUZW7d//IICKbrdSmemvZYjoYHaZKKzC9i7q65OfqeD9
cVRFbaYYchzJjyQ6KjBlottjRJ4r+eehIVGPCkFx40yUaCrDU+95s+Xkubo/
86poxDkXphptbrqVJcg56lXacJ08hxMp1glFmdj596D9ZF0RGGyCLbwJ77ZY
bJKb8SANxZnhQV4fC0A7/fuEcigNQpsYztn6JINXusWEUzcXlWMNH9szaMiU
XsHtvz4RjwUu6BpszkKooxT4KwlOa+Tgy9zQhQTVW1qOpJ+5vttn2qQyAktZ
O9np3m4I6jAM7X1djpcrbqvYigxD5YT7gU9knh369bSN9Xg1fB/QlMq2UnDr
dM15BtUWfIhyu94hVo3zK+UMY2op2C/TM/bxcCOm3zHylytVYeddMYekE1Tk
x6fPBJyrgZYDc3dndwXmm17LPU6g4onWKYYZtgpsu7fqwzfy3udMpwotnaHi
D9uyjavNSxDkU+And6YU4wcqb5nI0ODsYqq6zLwQfxlM6+4/IPNt5x83l6sE
D7dIq4SO5KCKIqI5864Q+mx5vFqkbvbmFxMEMzJwZ54l1r4gD8vzfyavCKeB
raDTlnFXKjxXej1ossjG4Tcj/jeyaZgWk306IZmEfdmn58QfZ2D9rHD312rC
m6x/U9IuxkFtpNFXMS8Vl5eznHlJeHeSnwd3wuYoyIt8q396LBkxy10cZb7S
sOzh/Q1OrR+R8MYkJ5unGizyG2l66iNYLsm6ZGC+G6sz+77MKFej9rODxMaR
IbDXixSZKLZDsqe17dX6KrTt21gTpEnwQ6jTMRbDZmDQxurjmwpMbrvf9XgN
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
+2id1999ZRgIudm3zp6G/wFJ3MoD
    "]],
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->{{0, 2}, {0, 3}, {0., 0.506242044721695}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.588557918927767*^9, 3.6149952902257414`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Prob", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "f"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Cov", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "f"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Varcov", "[", "f", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Marginal", "[", 
  RowBox[{"x", ",", "f"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Conditional", "[", 
  RowBox[{"y", ",", "f"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"mgf", "=", 
  RowBox[{"Expect", "[", 
   RowBox[{
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{
       SubscriptBox["t", "1"], " ", "x"}], " ", "+", " ", 
      RowBox[{
       SubscriptBox["t", "2"], " ", "y"}]}], "]"}], ",", " ", "f"}], 
   "]"}]}]}], "Input"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           RowBox[{"-", "2"}], " ", 
           RowBox[{"(", 
            RowBox[{"x", "+", "y"}], ")"}]}]], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["\[ExponentialE]", "x"]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["\[ExponentialE]", "y"]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"x", "+", "y"}]], "+", "\[Alpha]"}], ")"}]}], 
        RowBox[{
         RowBox[{"x", ">", "0"}], "&&", 
         RowBox[{"y", ">", "0"}]}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.5885579251991277`*^9, 3.6149952961849794`*^9}],

Cell[BoxData[
 FractionBox["\[Alpha]", "4"]], "Output",
 CellChangeTimes->{3.5885579251991277`*^9, 3.6149952992581987`*^9}],

Cell[BoxData[
 RowBox[{"(", GridBox[{
    {"1", 
     FractionBox["\[Alpha]", "4"]},
    {
     FractionBox["\[Alpha]", "4"], "1"}
   }], ")"}]], "Output",
 CellChangeTimes->{3.5885579251991277`*^9, 3.614995302393819*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", "x"}]], 
        RowBox[{"x", ">", "0"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.5885579251991277`*^9, 3.6149953050302362`*^9}],

Cell[BoxData[
 RowBox[{"\<\"Here is the conditional pdf \"\>", 
  TagBox["f",
   HoldForm], "\<\"(\"\>", "y", 
  TagBox[
   StyleBox["\<\"|\"\>",
    SpanMinSize->2.5],
   StyleForm[#, SpanMinSize -> 2.5]& ], "x", "\<\"):\"\>"}]], "Message",
 CellChangeTimes->{3.614995305045836*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"x", "-", 
           RowBox[{"2", " ", 
            RowBox[{"(", 
             RowBox[{"x", "+", "y"}], ")"}]}]}]], " ", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"x", "+", "y"}]], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "2"}], "+", 
              SuperscriptBox["\[ExponentialE]", "x"]}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "2"}], "+", 
              SuperscriptBox["\[ExponentialE]", "y"]}], ")"}], " ", 
            "\[Alpha]"}]}], ")"}]}], 
        RowBox[{"y", ">", "0"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.5885579251991277`*^9, 3.6149953055762396`*^9}],

Cell[BoxData[
 RowBox[{"\<\"This further assumes that: \"\>", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SubscriptBox["t", "1"], "<", "1"}], ",", 
    RowBox[{
     SubscriptBox["t", "2"], "<", "1"}]}], "}"}]}]], "Message",
 CellChangeTimes->{3.6149953209891386`*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"4", "-", 
   RowBox[{"2", " ", 
    SubscriptBox["t", "2"]}], "+", 
   RowBox[{
    SubscriptBox["t", "1"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
       SubscriptBox["t", "2"]}]}], ")"}]}]}], 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "2"}], "+", 
     SubscriptBox["t", "1"]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SubscriptBox["t", "1"]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"2", "-", 
     RowBox[{"3", " ", 
      SubscriptBox["t", "2"]}], "+", 
     SubsuperscriptBox["t", "2", "2"]}], ")"}]}]]], "Output",
 CellChangeTimes->{3.5885579251991277`*^9, 3.6149953210047383`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "power", " ", "of", " ", "the", " ", "Manipulate", " ", 
    RowBox[{"command", ".", " ", "The"}], " ", "command", " ", "below", " ", 
    "illustrates", " ", "too", " ", "many", " ", "additional", " ", "options",
     " ", "of", " ", "the", " ", "Plot3D", " ", "command", " ", "to", " ", 
    "make", " ", 
    RowBox[{"\"\<the ultimate plot\>\"", ".", " ", "If"}], " ", "you", " ", 
    "just", " ", "want", " ", "to", " ", "see", " ", "the", 
    "\[IndentingNewLine]", "simple", " ", "effect", " ", "of", " ", 
    "Manipulate", " ", "you", " ", "can", " ", "go", " ", "over", " ", 
    "directly", " ", "to", " ", "the", " ", "next", " ", 
    RowBox[{"command", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Plot3D", "[", 
      RowBox[{
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{
          RowBox[{"-", "2"}], " ", 
          RowBox[{"(", 
           RowBox[{"x", "+", "y"}], ")"}]}]], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"x", "+", "y"}]], "+", 
          RowBox[{"\[Alpha]", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["\[ExponentialE]", "x"], "-", "2"}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["\[ExponentialE]", "y"], "-", "2"}], ")"}]}]}], 
         ")"}]}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", "0", ",", " ", "2"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"y", ",", " ", "0", ",", " ", "3"}], "}"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"AxesLabel", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<\!\(\*\nStyleBox[\\\"x\\\",\\nFontSlant->\\\"Italic\\\"]\)\>\"",
           ",", " ", 
          "\"\<\!\(\*\n\
StyleBox[\\\"y\\\",\\nFontSlant->\\\"Italic\\\"]\)\>\"", ",", " ", 
          "\"\<\!\(\*\n\
StyleBox[\\\"f\\\",\\nFontSlant->\\\"Italic\\\"]\)\>\""}], "}"}]}], ",", 
       RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], ",", " ", 
       RowBox[{"Ticks", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", ".5"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"ImageSize", " ", "\[Rule]", " ", "450"}], ",", " ", 
       RowBox[{"PerformanceGoal", " ", "\[Rule]", " ", "\"\<Quality\>\""}], 
       ",", 
       RowBox[{"PlotLabel", " ", "\[Rule]", " ", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<\[Alpha] = \>\"", ",", " ", 
            RowBox[{"ToString", "[", 
             RowBox[{"PaddedForm", "[", 
              RowBox[{"\[Alpha]", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], "]"}], ",", 
          " ", 
          RowBox[{"FontColor", " ", "\[Rule]", " ", "Red"}], ",", " ", 
          RowBox[{"FontSize", " ", "\[Rule]", "14"}]}], "]"}]}]}], "]"}], ",",
      " ", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Alpha]", ",", 
         RowBox[{"-", "0.8"}]}], "}"}], ",", 
       RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.49171651903125*^9, 3.491716564140625*^9}, {
  3.491716793875*^9, 3.49171679453125*^9}, {3.492133008078125*^9, 
  3.492133156125*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = -0.33799999999999997`, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], -0.8}, -1, 0}}, Typeset`size$$ = {
    675., {337., 346.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$24399$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`\[Alpha]$$ = -0.8}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$24399$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot3D[E^((-2) ($CellContext`x + $CellContext`y)) (
         E^($CellContext`x + $CellContext`y) + ($CellContext`\[Alpha]$$ (
            E^$CellContext`x - 2)) (E^$CellContext`y - 2)), {$CellContext`x, 
         0, 2}, {$CellContext`y, 0, 3}, 
        AxesLabel -> {
         "\!\(\*\nStyleBox[\"x\",\nFontSlant->\"Italic\"]\)", 
          "\!\(\*\nStyleBox[\"y\",\nFontSlant->\"Italic\"]\)", 
          "\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\)"}, AspectRatio -> 
        1, PlotRange -> {0, 1}, Ticks -> {{0, 1, 2}, {0, 1}, {0, 0.5}}, 
        ImageSize -> 450, PerformanceGoal -> "Quality", PlotLabel -> Style[
          StringJoin["\[Alpha] = ", 
           ToString[
            PaddedForm[$CellContext`\[Alpha]$$, {3, 2}]]], FontColor -> Red, 
          FontSize -> 14]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, -0.8}, -1, 0}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{747., {400., 409.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.588557958786789*^9, 3.6149953210359383`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Or", " ", "MORE", " ", "SIMPLY"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"Plot3D", "[", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", "2"}], " ", 
         RowBox[{"(", 
          RowBox[{"x", "+", "y"}], ")"}]}]], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"x", "+", "y"}]], "+", 
         RowBox[{"\[Alpha]", " ", 
          RowBox[{"(", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", "x"], "-", "2"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", "y"], "-", "2"}], ")"}]}]}], 
        ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Alpha]", ",", 
        RowBox[{"-", "0.8"}]}], "}"}], ",", 
      RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.491717697390625*^9, 3.491717725875*^9}, 
   3.4921331770625*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = -0.7110000000000001, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], -0.8}, -1, 0}}, Typeset`size$$ = {
    540., {216., 226.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$24449$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`\[Alpha]$$ = -0.8}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$24449$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot3D[E^((-2) ($CellContext`x + $CellContext`y)) (
         E^($CellContext`x + $CellContext`y) + ($CellContext`\[Alpha]$$ (
            E^$CellContext`x - 2)) (E^$CellContext`y - 2)), {$CellContext`x, 
         0, 2}, {$CellContext`y, 0, 3}], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, -0.8}, -1, 0}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{612., {279., 288.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.588557959067596*^9, 3.6149953211763396`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "2.", " ", "Fisher", " ", "information", " ", "matrix", 
     "\[IndentingNewLine]", "whenever", " ", "possible", " ", "to", " ", 
     "calculate", " ", "explicitly"}], ",", " ", 
    RowBox[{"for", " ", "example", " ", "for", " ", "inverse", " ", 
     RowBox[{"Gaussian", " ", ":"}]}]}], " ", "*)"}], "\n", "             ", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "  ", "=", 
     RowBox[{
      SqrtBox[
       FractionBox["\[Lambda]", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         SuperscriptBox["x", "3"]}]]], " ", 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[Lambda]"}], " ", 
        FractionBox[
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"], 
         RowBox[{"2", 
          SuperscriptBox["\[Mu]", "2"], "x"}]]}], "]"}]}]}], ";"}], "   ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "\[Infinity]"}], "}"}], " ", "&&", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Mu]", ">", "0"}], ",", 
        RowBox[{"\[Lambda]", ">", "0"}]}], "}"}]}]}], ";"}], "\n", 
   RowBox[{"FisherInformation", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Mu]", ",", "\[Lambda]"}], "}"}], ",", "f"}], 
    "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"(", GridBox[{
    {
     FractionBox["\[Lambda]", 
      SuperscriptBox["\[Mu]", "3"]], "0"},
    {"0", 
     FractionBox["1", 
      RowBox[{"2", " ", 
       SuperscriptBox["\[Lambda]", "2"]}]]}
   }], ")"}]], "Output",
 CellChangeTimes->{3.5877732341358614`*^9, 3.587773401590555*^9, 
  3.58855773730791*^9, 3.588557871814559*^9, 3.5885579611268487`*^9, 
  3.6149953244211607`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"3.", " ", 
    RowBox[{"Now", ":", " ", 
     RowBox[{"non", "-", 
      RowBox[{"parametric", " ", "density", " ", 
       RowBox[{"estimation", ":"}]}]}]}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"ReadList", "[", "\"\<sd.dat\>\"", "]"}]}], "\n", 
   RowBox[{
    RowBox[{"f", "=", 
     FractionBox[
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        FractionBox[
         SuperscriptBox["x", "2"], "2"]}]], 
      SqrtBox[
       RowBox[{"2", " ", "\[Pi]"}]]]}], ";", "        ", 
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], " ", "=", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], ";"}], 
   " ", 
   RowBox[{"(*", " ", 
    RowBox[{"defines", " ", "the", " ", "kernel"}], " ", "*)"}], "\n", 
   RowBox[{"c", "=", 
    RowBox[{"Bandwidth", "[", 
     RowBox[{"data", ",", "f", ",", 
      RowBox[{"Method", "\[Rule]", "SheatherJones"}]}], "]"}]}], "\n", 
   RowBox[{"NPKDEPlot", "[", 
    RowBox[{"data", ",", "c", ",", "f"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.5885577289772964`*^9, 3.5885577313485575`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "139.8`", ",", "141.`", ",", "139.5`", ",", "141.7`", ",", "140.2`", ",", 
   "142.2`", ",", "140.3`", ",", "142.`", ",", "139.7`", ",", "141.8`", ",", 
   "139.9`", ",", "141.4`", ",", "140.2`", ",", "141.6`", ",", "139.9`", ",", 
   "141.7`", ",", "139.4`", ",", "141.9`", ",", "140.3`", ",", "140.7`", ",", 
   "139.2`", ",", "141.8`", ",", "140.1`", ",", "142.2`", ",", "140.6`", ",", 
   "141.4`", ",", "139.9`", ",", "141.7`", ",", "139.7`", ",", "141.8`", ",", 
   "139.2`", ",", "141.6`", ",", "139.8`", ",", "141.7`", ",", "139.9`", ",", 
   "141.9`", ",", "140.`", ",", "141.5`", ",", "139.2`", ",", "141.9`", ",", 
   "139.6`", ",", "141.4`", ",", "139.6`", ",", "141.6`", ",", "140.2`", ",", 
   "141.5`", ",", "139.7`", ",", "141.6`", ",", "140.1`", ",", "141.1`", ",", 
   "139.6`", ",", "142.3`", ",", "140.2`", ",", "142.4`", ",", "140.`", ",", 
   "141.9`", ",", "140.3`", ",", "141.8`", ",", "139.9`", ",", "142.`", ",", 
   "139.8`", ",", "141.8`", ",", "139.2`", ",", "142.3`", ",", "139.9`", ",", 
   "140.7`", ",", "139.7`", ",", "141.`", ",", "139.5`", ",", "141.4`", ",", 
   "139.5`", ",", "141.8`", ",", "139.4`", ",", "141.8`", ",", "138.3`", ",", 
   "142.`", ",", "139.8`", ",", "142.1`", ",", "139.6`", ",", "141.3`", ",", 
   "139.3`", ",", "142.3`", ",", "139.2`", ",", "140.9`", ",", "139.9`", ",", 
   "141.7`", ",", "139.9`", ",", "140.9`", ",", "139.3`", ",", "141.`", ",", 
   "139.8`", ",", "141.8`", ",", "139.9`", ",", "141.5`", ",", "138.1`", ",", 
   "142.`", ",", "139.4`", ",", "141.1`", ",", "139.4`", ",", "142.`", ",", 
   "139.8`", ",", "141.3`", ",", "139.`", ",", "141.1`", ",", "139.3`", ",", 
   "140.9`", ",", "139.4`", ",", "141.6`", ",", "139.5`", ",", "141.4`", ",", 
   "139.7`", ",", "142.`", ",", "139.5`", ",", "141.2`", ",", "139.2`", ",", 
   "141.1`", ",", "139.3`", ",", "141.3`", ",", "137.9`", ",", "141.4`", ",", 
   "138.4`", ",", "141.6`", ",", "138.1`", ",", "141.5`", ",", "139.5`", ",", 
   "141.5`", ",", "139.1`", ",", "141.4`", ",", "139.8`", ",", "141.5`", ",", 
   "139.7`", ",", "140.8`", ",", "138.8`", ",", "141.3`", ",", "138.6`", ",", 
   "141.5`", ",", "139.6`", ",", "141.8`", ",", "139.7`", ",", "139.6`", ",", 
   "137.8`", ",", "140.9`", ",", "139.6`", ",", "141.4`", ",", "139.4`", ",", 
   "141.2`", ",", "139.2`", ",", "141.8`", ",", "139.6`", ",", "142.1`", ",", 
   "139.`", ",", "141.7`", ",", "139.7`", ",", "141.2`", ",", "139.6`", ",", 
   "141.`", ",", "139.1`", ",", "140.9`", ",", "137.8`", ",", "141.8`", ",", 
   "139.1`", ",", "140.6`", ",", "138.7`", ",", "141.`", ",", "139.3`", ",", 
   "141.9`", ",", "139.3`", ",", "141.3`", ",", "139.5`", ",", "141.2`", ",", 
   "139.4`", ",", "141.5`", ",", "138.5`", ",", "141.6`", ",", "139.2`", ",", 
   "142.1`", ",", "139.4`", ",", "141.5`", ",", "139.2`", ",", "142.`", ",", 
   "139.4`", ",", "141.6`", ",", "138.6`", ",", "141.4`", ",", "139.2`", ",", 
   "141.5`", ",", "138.5`", ",", "141.5`", ",", "139.8`", ",", "142.`", ",", 
   "139.6`", ",", "141.7`", ",", "139.7`", ",", "141.1`", ",", "140.`", ",", 
   "141.2`", ",", "139.4`", ",", "141.5`", ",", "139.6`", ",", "141.2`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5885578718769608`*^9, 3.58855796117365*^9, 
  3.6149953253727665`*^9}],

Cell[BoxData["0.20005931435201127`"], "Output",
 CellChangeTimes->{3.5885578718769608`*^9, 3.58855796117365*^9, 
  3.6149953253727665`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwV1nk81Nv7AHA0yS1kKylEET8qpRLCc4xB9iVuRF1HKWuWSHZJjK2VSpJ9
L4zsYqyRfR2MaLlN0aJ70yWVfM/vj89rXu/Xa+ZznvOcZ57nyDp7W7vwcHFx
Mcnz/5/aPddqVA9gVGY6uiifeQMOYsq9N8RnTtV/a3p+C5SWgi7dOojRoPjL
Ctt1KSC+00Xj6yGMHrbMxy2kp4JgHVsiWw0jX27aOVNOGlAsLH9YHcZIttOr
mFv6IfwbfKSBoY7RWpp23RrZLJgVYqRhDfK+nYqSwRuzYSZ/V6iwJka7mf0a
8bPZMKr1wLGF+MU/Z/jci3OgZ1hY2/cIRkfemZvvscmFVtdYKVktjFTqt2t0
cXKh9vevlUHi3vqZDeuc8qA02W8mUhsj5wLHs6HteZCnNNu0TwcjfS8zTddN
+dAbm+z+hdjKdFPInyfy4etbtLkUMKrm5oa26/mwhfq5xRNhZLalweFIfT7o
ZKR6KetiVDDE9y1qJh/O/NKX+EBsvhxY5MpdAAn2X9sLqRitN5axeqBQABXV
D33O6WF0Qywon25bABOiJpK7aBjtnwznUrleAL99ljrfEstyGKKUiQKQ68+5
kKOPkd1LilGfaiEYK1tudzbA6OuWhT8isgrBl/6rW8YQo60auuek5IvgHqfw
4ktiVSdKWFZjETRRbXc8PIqRRcRAzTu3Ynibwd3vaITRtyTpkByFEli/8jho
mzFG0R39sT4LJfAtoyyqj7g+O9w7vv4RzFAZCREmGAUzmcVdVx9DF6cieb8p
if8uc9XTshQq6JXpfxNLCa3oBW0qgwfK1fkpZiQ/Ez7o60AZxPTXlBmak/3c
5VJM0S4HH9+62mViU9d5TXpcOZwQa2gpscCIFj0ojrrLgVbztPukJUZ9KX2U
zt/lsPdE08hGK4wSBq6EvdvFgC0rzBctxEojtDM0PQbwZLZwLlhjJPHPyz+C
bBnwido2L3+M7P/t+XxJJwawOO1L48RPJXz395xlQDP9GVe8DUbvJLveSJ1n
QJFy1x9athj9PH2Ncj+EAYPJzOQPxJ+KdjXNJjNgcaV6e+qfGC29fd002MwA
qXOlxYbHMZouoVo58FYAbTDv0CJx5kD06SHPCvDQSG/OtcNIZPllb9TPCriV
nWxyzB6jPcXJ3+l1T6BuQyKL+wSJ9+SrmZjHlfDK/wouJ/YNaIxwna6CdTPB
n045kPOaf28rZ14Dew39AgUcSXwiQ+6X19SBbbkbz1PimdsX+t6u1kOoBE5y
P4lRqJmn/P/RGiEnym6LxCmMRp/ZzkUNMKH7o0VOJ3FNd11pnUULiDfp1Mk5
YSStZWmDw9rh/LznxjfEhuX+AhGnn0G7dJpLBsZIq60v8S/nLvCLWBLeehoj
5XLbkss3e+F5mbzrOPHg5lWj4Mp+kHl1rCn5DEZ6OoVlIh6D0IfK3TeeJfmZ
e/yvQ/gwyPnONPcSrwjIgF3ICARn8YvHn8No7rCy8VvPURga0vQydMWId+8m
dROrMVDkcWujuGFE4Rc0MVJgQYTqXYlWYkMPZQ5lngUs5w7vCHey/vUgB+68
cdh9e6FDywMjv52IX8B0Aq60yUr+IDZcjg3c/fcEPNTIGyj2xGhZCo9/x5NQ
W6Z4xcGL5FOe47JnZBKG5R+p8Z8nNtGP+ajGhk9pKh+eEkuqtGymJbGBV+RJ
upc3qSfjX1QVFhtk6WpW0j4YVXRfLogVngKt33WUAeK89DWv+WAK/vTXro3w
xcgm/Kib1akp8PnQ7LHPD6OTL2L935+fgngn2vbXxAePqp1CPlOQy+ocvnkB
o2xxb8luPAVMU5MYqj/pZ2aKcovUKWC39mssEHPP88rpi07BN3XrzzkBJD9U
9RXrYTYIlo1l2lwk/ZjlfvZNBBsU5e1t1gaS/qfeUvx+Gxv8nEVH2ok/lauV
fk+bhKcZfVbRlzBKj7YQ1uabBN7p2EG9IIx0Vr9UlOAJsNpKtVgTjJF9Z1Je
ZtE4PDj+q6+VOMhDNon9mgXvkqtNo0IwSjqpctaPnwXBG5WNucPI/9tlj3sC
dRTaTTldzcQS1ceLPI+NgGB8hmFkOEYGlQ1mmngYsili+qsRGAm2ifSh8EH4
pNvf1hSJUfydYcEouQFQi6BTwy+TellDuydn3wc9y79gJQqjdpXX4hkLz8F6
5RGqu4JRiO2dryfOdAGb66RuQDRGPepTYV6zzwBTBKj7r2J0SChejj+yA2bX
NVI/E29OP1AiqtwO3hu89IpiSP5kK3gOzbXCoqAUzSWWrKfM2CZb3wKUzWH6
03RyXrw6+osKTEiQ2GOQGkf2f4nf4KNmI4hITRvYxmMU4yR1ixXQAPdlkgyF
EzB6UmOhu8yuA1k57aN9xF77c9QlvGqhUOHz0bhEsn+U0m6mUgP7lNON9JNI
fWXMCrTJVUPNXjNj7msYUTld90Msq0BHdcW4kVi2sSlxc1UlxIXwFHlex8hy
NXBA074SRtvXrZO8gdGEYdWNtv2VIC0o4NJDvOHkro+HoBLcjou0Bd8k9YzC
RUIvV0Jlpris0i2M/vPnzZlbqoTfc5IRk8Qnb4/vN8iqAqMDO6bpt0k/3xtS
MxVSDcmhCkfUkzHqHxq8GHO1Bl527E59TxzHfwK3N9SC0kbVpTsppD8rfE5r
3VYP/naHbQ3ukHjME6+5ZjcAM0vryX/Eovp6NU6mjbD+o65w3l0S33ynksxm
JtgcNPS2uYeRWkfXpqWwZvjwzEr5SSpGa74VuYrFtMKZ8SQb3/sY/StzlPO4
tA1evn8eppKGURcjE2xn2mGUjzpY8gCjsxFBPqFGndBkrBqQm4FRimiAQLJ0
L9zuF2Gm5GG0+GV2+tn4MAzL5eob5mPUGHF6TfP5ERAKOdT7nXh+NVjMlG8U
EhXsJh0KMXo9k3Jxj+4YdIfN/SVQhFGr367mxpkx4BsNftdELOT4+otjCAui
I9MXZEsw2lHFCTxQMg6trL3BI8Tcp+3dajUngGtPM9fVRxhddjjnKtQ6ATpX
rGLVHpPzT7qQaweTEDr5RmCW+FD2cc+h8kmoV/FPTi0l/cXj5vQ/Ymz4fnXt
NpMyUs8uh9N83dmg9uJO1i9i7SEvumM5GwJUFRVLy8k8C/u2yP+ODf+Yl+1z
ZJD7mVCMXvr6KfD0UNNYX4FRbZYVz5HtU/A+tlG3lvivlxk/xOWmwDmXZnz2
CUbHwo+kJEtMwXRzj7VYJVnPxIhflWsK7KatHVqJjffm0KMn2DCyPHnapwqj
cbEf7rty2GC+GXtKV5P7F3dq72MnNjxXnfXvJf5vi92PXGE20Cy8w4JrMIp0
VrSNqZ4EpsfiVcVaMs8u0QsbLCZBkx52jUWscrCUkTk9AVW5lLvRdRjlvDIx
pjtNwL6WhAzVeoxWE60D2ibGQeFHavm1BjJPt/oOZxSzYHj6eLTJU4zuofPN
eYtjENayyY6vkdSL1I0FM/UxGKHfXL3cRL4/GWnunTkCEeJx5gEtpJ99rgih
Kw6C0k+DHaqtZH4mcuT/pvfD2AxlcZ74p5Jmr3JrLyjnR6a7tmPUacNkPqI9
h/GDlz45dJJ5qtWxk9PZClrKD10lujBSuHWT57hxC2TLtr9lEReUBsrO1TLB
U1Bo2qobo/BMp5YPuB6GKGr2G3swur8YsGL/vgbUfjqM9RLHiyr8KkuqAq7Z
gj7DPtIPaDLVPDoMcJnpM1rbT/rbQEyxzs1S6B5d6GglHm0IaGB8KIZ9PRLU
yAGMjKSporxxBZDSAk3ag+T3HYFchZ658KPGRfMn8XW+HquMlCxwKk2orh3C
iD/lDX2E9yF05DJULw5j1Pw0errBLRWU0sZLD4xgxJKq4hywTIH/ARzCmoI=

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, 0},
  DisplayFunction->Identity,
  Method->{},
  PlotRange->{0, 0.42872628403086144`},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.5885578718769608`*^9, 3.58855796117365*^9, 
  3.6149953253727665`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"4.1", ".", " ", "Symbolic"}], " ", "MLE", " ", "for", " ", 
    "normal"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"f", " ", "=", " ", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"\[Sigma]", 
        SqrtBox[
         RowBox[{"2", " ", "\[Pi]"}]]}]], 
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        FractionBox[
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"], 
         RowBox[{"2", " ", 
          SuperscriptBox["\[Sigma]", "2"]}]]}], "]"}]}]}], ";", "      ", 
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], "=", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], "&&", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Mu]", "\[Element]", "Reals"}], ",", 
        RowBox[{"\[Sigma]", ">", "0"}]}], "}"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"SuperLog", "[", "On", "]"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{" ", 
      RowBox[{"Note", ":", " ", 
       RowBox[{
        StyleBox["SuperLog",
         FontFamily->"Courier"], 
        StyleBox[" ",
         FontFamily->"Courier"], "modifies", " ", 
        StyleBox["Mathematica",
         FontSlant->"Italic"]}]}], "\[CloseCurlyQuote]"}], "s", " ", 
     ButtonBox[
      RowBox[{"Log", " "}],
      BaseStyle->"Link",
      ButtonData:>"ref/Log"], "functionso", " ", "that", " ", 
     StyleBox[
      RowBox[{"Log", "[", 
       RowBox[{"Product", "[", "]"}], "]"}],
      FontFamily->"Courier"], 
     RowBox[{"\[OpenCurlyQuote]", "objects", "\[CloseCurlyQuote]"}], " ", 
     "or", " ", 
     RowBox[{"\[OpenCurlyQuote]", "terms", "\[CloseCurlyQuote]"}], " ", "get",
      " ", "converted", " ", "into", " ", "sums", " ", "of", " ", 
     RowBox[{"logarithms", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"logL\[Theta]", "=", 
    RowBox[{"Log", "[", 
     RowBox[{
      UnderoverscriptBox["\[Product]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{"(", 
       RowBox[{"f", "/.", 
        RowBox[{"x", "\[Rule]", 
         SubscriptBox["x", "i"]}]}], ")"}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"score", "=", 
    RowBox[{"Grad", "[", 
     RowBox[{"logL\[Theta]", ",", 
      RowBox[{"{", 
       RowBox[{"\[Mu]", ",", "\[Sigma]"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"sol\[Theta]", "=", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{"score", "==", "0"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Mu]", ",", "\[Sigma]"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"sol\[Theta]", "=", 
    RowBox[{"sol\[Theta]", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Eigenvalues", "[", 
     RowBox[{
      RowBox[{"Hessian", "[", 
       RowBox[{"logL\[Theta]", ",", 
        RowBox[{"{", 
         RowBox[{"\[Mu]", ",", "\[Sigma]"}], "}"}]}], "]"}], "/.", 
      "sol\[Theta]"}], "]"}], "//", "Simplify"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.4921336673125*^9, 3.492133722*^9}}],

Cell[BoxData["\<\"SuperLog is now On.\"\>"], "Message",
 CellChangeTimes->{3.614995326979577*^9}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"n", " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["\[Mu]", "2"], "+", 
       RowBox[{
        SuperscriptBox["\[Sigma]", "2"], " ", 
        RowBox[{"Log", "[", 
         RowBox[{"2", " ", "\[Pi]"}], "]"}]}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["\[Sigma]", "2"], " ", 
        RowBox[{"Log", "[", "\[Sigma]", "]"}]}]}], ")"}]}], "-", 
    RowBox[{"2", " ", "\[Mu]", " ", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubscriptBox["x", "i"]}]}], "+", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "n"], 
     SubsuperscriptBox["x", "i", "2"]}]}], 
   RowBox[{"2", " ", 
    SuperscriptBox["\[Sigma]", "2"]}]]}]], "Output",
 CellChangeTimes->{3.588557872360573*^9, 3.588557961610461*^9, 
  3.6149953270731773`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"-", "n"}], " ", "\[Mu]"}], "+", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubscriptBox["x", "i"]}]}], 
    SuperscriptBox["\[Sigma]", "2"]], ",", 
   FractionBox[
    RowBox[{
     RowBox[{"n", " ", 
      SuperscriptBox["\[Mu]", "2"]}], "-", 
     RowBox[{"n", " ", 
      SuperscriptBox["\[Sigma]", "2"]}], "-", 
     RowBox[{"2", " ", "\[Mu]", " ", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubscriptBox["x", "i"]}]}], "+", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubsuperscriptBox["x", "i", "2"]}]}], 
    SuperscriptBox["\[Sigma]", "3"]]}], "}"}]], "Output",
 CellChangeTimes->{3.588557872360573*^9, 3.588557961610461*^9, 
  3.6149953271043777`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Mu]", "\[Rule]", 
      FractionBox[
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["x", "i"]}], "n"]}], ",", 
     RowBox[{"\[Sigma]", "\[Rule]", 
      RowBox[{"-", 
       FractionBox[
        SqrtBox[
         RowBox[{
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              UnderoverscriptBox["\[Sum]", 
               RowBox[{"i", "=", "1"}], "n"], 
              SubscriptBox["x", "i"]}], ")"}], "2"]}], "+", 
          RowBox[{"n", " ", 
           RowBox[{
            UnderoverscriptBox["\[Sum]", 
             RowBox[{"i", "=", "1"}], "n"], 
            SubsuperscriptBox["x", "i", "2"]}]}]}]], "n"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Mu]", "\[Rule]", 
      FractionBox[
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["x", "i"]}], "n"]}], ",", 
     RowBox[{"\[Sigma]", "\[Rule]", 
      FractionBox[
       SqrtBox[
        RowBox[{
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             UnderoverscriptBox["\[Sum]", 
              RowBox[{"i", "=", "1"}], "n"], 
             SubscriptBox["x", "i"]}], ")"}], "2"]}], "+", 
         RowBox[{"n", " ", 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"i", "=", "1"}], "n"], 
           SubsuperscriptBox["x", "i", "2"]}]}]}]], "n"]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.588557872360573*^9, 3.588557961610461*^9, 
  3.6149953272291784`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[Mu]", "\[Rule]", 
    FractionBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubscriptBox["x", "i"]}], "n"]}], ",", 
   RowBox[{"\[Sigma]", "\[Rule]", 
    FractionBox[
     SqrtBox[
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"i", "=", "1"}], "n"], 
           SubscriptBox["x", "i"]}], ")"}], "2"]}], "+", 
       RowBox[{"n", " ", 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"i", "=", "1"}], "n"], 
         SubsuperscriptBox["x", "i", "2"]}]}]}]], "n"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.588557872360573*^9, 3.588557961610461*^9, 
  3.6149953272291784`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"2", " ", 
     SuperscriptBox["n", "3"]}], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["x", "i"]}], ")"}], "2"], "-", 
     RowBox[{"n", " ", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubsuperscriptBox["x", "i", "2"]}]}]}]], ",", 
   FractionBox[
    SuperscriptBox["n", "3"], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "n"], 
        SubscriptBox["x", "i"]}], ")"}], "2"], "-", 
     RowBox[{"n", " ", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "n"], 
       SubsuperscriptBox["x", "i", "2"]}]}]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.588557872360573*^9, 3.588557961610461*^9, 
  3.6149953273851795`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"4.2", ".", " ", "Symbolic"}], " ", "MLE"}], "-", 
    RowBox[{"second", " ", "example"}]}], " ", "*)"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"L", " ", "=", "  ", 
     RowBox[{
      UnderoverscriptBox["\[Product]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{
       FractionBox[
        SubscriptBox["x", "i"], 
        SuperscriptBox["\[Sigma]", "2"]], 
       RowBox[{"Exp", "[", 
        RowBox[{"-", 
         FractionBox[
          SubsuperscriptBox["x", "i", "2"], 
          RowBox[{"2", 
           SuperscriptBox["\[Sigma]", "2"]}]]}], "]"}]}]}]}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{"Rayleigh", 
     RowBox[{"(", "\[Sigma]", ")"}]}], " ", "*)"}], "\n", 
   RowBox[{"SuperLog", "[", "On", "]"}], "\n", 
   RowBox[{"logL", "=", 
    RowBox[{"Log", "[", "L", "]"}]}], "\n", 
   RowBox[{"FOC", "=", 
    RowBox[{"D", "[", 
     RowBox[{"logL", ",", 
      RowBox[{"{", 
       RowBox[{"\[Sigma]", ",", "1"}], "}"}]}], "]"}]}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"From", " ", "First", " ", "Order", " ", "Conditions"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    OverscriptBox["\[Sigma]", "^"], "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{"FOC", "==", "0"}], ",", "\[Sigma]"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], "\n", 
   RowBox[{"SOC", "=", 
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{"logL", ",", 
       RowBox[{"{", 
        RowBox[{"\[Sigma]", ",", "2"}], "}"}]}], "]"}], "/.", 
     OverscriptBox["\[Sigma]", "^"]}]}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"From", " ", "Second", " ", "Order", " ", "Conditions"}], " ", 
    "*)"}], "\n", 
   RowBox[{"data", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "6", ",", "3", ",", "4"}], "}"}]}], "\n", 
   RowBox[{
    OverscriptBox["\[Sigma]", "^"], "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"n", "\[Rule]", "4"}], ",", 
      RowBox[{
       SubscriptBox["x", "i_"], ":>", 
       RowBox[{"data", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"This", " ", "is", " ", "rule", " ", "delayed"}], " ", "*)"}], 
   "\n", 
   RowBox[{"SuperLog", "[", "Off", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.49213412503125*^9, 3.492134125375*^9}, {
  3.4921343928125*^9, 3.492134408890625*^9}, {3.49213446209375*^9, 
  3.49213446559375*^9}, {3.49213450340625*^9, 3.49213452240625*^9}}],

Cell[BoxData["\<\"SuperLog is now On.\"\>"], "Message",
 CellChangeTimes->{3.6149953300059958`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "2"}], " ", "n", " ", 
   RowBox[{"Log", "[", "\[Sigma]", "]"}]}], "+", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{"Log", "[", 
    SubscriptBox["x", "i"], "]"}]}], "-", 
  FractionBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubsuperscriptBox["x", "i", "2"]}], 
   RowBox[{"2", " ", 
    SuperscriptBox["\[Sigma]", "2"]}]]}]], "Output",
 CellChangeTimes->{3.58855787381141*^9, 3.588557962140875*^9, 
  3.6149953300527964`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"2", " ", "n"}], "\[Sigma]"]}], "+", 
  FractionBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubsuperscriptBox["x", "i", "2"]}], 
   SuperscriptBox["\[Sigma]", "3"]]}]], "Output",
 CellChangeTimes->{3.58855787381141*^9, 3.588557962140875*^9, 
  3.6149953300527964`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[Sigma]", "\[Rule]", 
   FractionBox[
    SqrtBox[
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      SubsuperscriptBox["x", "i", "2"]}]], 
    RowBox[{
     SqrtBox["2"], " ", 
     SqrtBox["n"]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.58855787381141*^9, 3.588557962140875*^9, 
  3.6149953300683966`*^9}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{"8", " ", 
    SuperscriptBox["n", "2"]}], 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SubsuperscriptBox["x", "i", "2"]}]]}]], "Output",
 CellChangeTimes->{3.58855787381141*^9, 3.588557962140875*^9, 
  3.6149953300683966`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "6", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.58855787381141*^9, 3.588557962140875*^9, 
  3.6149953300683966`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[Sigma]", "\[Rule]", 
   FractionBox[
    SqrtBox["31"], "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.58855787381141*^9, 3.588557962140875*^9, 
  3.6149953300683966`*^9}],

Cell[BoxData["\<\"SuperLog is now Off.\"\>"], "Message",
 CellChangeTimes->{3.6149953300683966`*^9}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "5.", " ", "Densities", " ", "of", " ", "Order", " ", "statistics"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.4921354998125*^9, 3.492135502640625*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", " ", "=", " ", 
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", "x"}]], 
    RowBox[{" ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", "x"}]]}], ")"}], "2"]}]]}], ";", "     ", 
  RowBox[{
   RowBox[{"domain", "[", "f", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], ";"}], "\n", 
 RowBox[{"OrderStat", "[", 
  RowBox[{"r", ",", "f"}], "]"}], "\n", 
 RowBox[{"OrderStat", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"r", ",", "s"}], "}"}], ",", "f"}], "]"}]}], "Input"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "x"}]]}], ")"}], 
    RowBox[{"-", "r"}]], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["\[ExponentialE]", "x"]}], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "-", "n", "+", "r"}]], " ", 
   RowBox[{"n", "!"}]}], 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"n", "-", "r"}], ")"}], "!"}], " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "r"}], ")"}], "!"}]}]]], "Output",
 CellChangeTimes->{3.588557875449452*^9, 3.588557963622913*^9, 
  3.6149953318156075`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        FractionBox[
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           SubscriptBox["x", "s"]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"1", "+", 
             SuperscriptBox["\[ExponentialE]", 
              SubscriptBox["x", "r"]]}], ")"}], 
           RowBox[{"-", "s"}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"1", "+", 
             SuperscriptBox["\[ExponentialE]", 
              SubscriptBox["x", "s"]]}], ")"}], 
           RowBox[{
            RowBox[{"-", "1"}], "-", "n", "+", "r"}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", 
              SuperscriptBox["\[ExponentialE]", 
               SubscriptBox["x", "r"]]}], "+", 
             SuperscriptBox["\[ExponentialE]", 
              SubscriptBox["x", "s"]]}], ")"}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", "s"}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{
               RowBox[{"-", 
                SubscriptBox["x", "r"]}], "+", 
               SubscriptBox["x", "s"]}]]}], ")"}], 
           RowBox[{"-", "r"}]], " ", 
          RowBox[{"n", "!"}]}], 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "r"}], ")"}], "!"}], " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "-", "s"}], ")"}], "!"}], " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "-", "r", "+", "s"}], ")"}], "!"}]}]], 
        RowBox[{
         SubscriptBox["x", "r"], "<", 
         SubscriptBox["x", "s"]}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.588557875449452*^9, 3.588557963622913*^9, 
  3.6149953329544153`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "Order", " ", "stat", " ", "works", " ", "also", " ", "on", " ", 
      "piece"}], "-", 
     RowBox[{"wise", " ", "continuous", " ", 
      RowBox[{"functions", ".", " ", "The"}], " ", "Laplace", " ", 
      "distribution", " ", "with", " ", "parameters", " ", "\[Mu]"}]}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
      "\[Sigma]", "\[IndentingNewLine]", "has", " ", "its", " ", "density", 
       " ", "defined", " ", "piece"}], "-", 
      RowBox[{
      "wise", " ", "for", " ", "values", " ", "of", " ", "the", " ", 
       "argument"}]}], " ", "<", " ", "and", " ", ">", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Mu]", ".", "\[IndentingNewLine]", "The"}], " ", "density", 
       " ", "of", " ", "the", " ", "r"}], "-", 
      RowBox[{
      "th", " ", "order", " ", "statistic", " ", "is", " ", "also", " ", 
       "defined", " ", "piece"}], "-", 
      RowBox[{"wise", " ", ":"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"x", "<", "\[Mu]"}], ",", 
       FractionBox[
        SuperscriptBox["\[ExponentialE]", 
         FractionBox[
          RowBox[{"x", " ", "-", " ", "\[Mu]"}], "\[Sigma]"]], 
        RowBox[{"2", "\[Sigma]"}]], ",", 
       FractionBox[
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          FractionBox[
           RowBox[{"x", " ", "-", " ", "\[Mu]"}], "\[Sigma]"]}]], 
        RowBox[{"2", "\[Sigma]"}]]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"domain", "[", "f", "]"}], "=", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], " ", "&&", 
      " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Mu]", "\[Element]", "Reals"}], ",", " ", 
        RowBox[{"\[Sigma]", ">", "0"}]}], "}"}]}]}], ";"}], "\n", 
   RowBox[{"OrderStat", "[", 
    RowBox[{"r", ",", "f"}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.49213577875*^9, {3.492135812359375*^9, 3.49213600503125*^9}, {
   3.492138338734375*^9, 3.4921383441875*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"x", "<", "\[Mu]"}], ",", 
   FractionBox[
    RowBox[{
     SuperscriptBox["2", 
      RowBox[{"-", "r"}]], " ", 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox[
       RowBox[{"r", " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "\[Mu]"}], ")"}]}], "\[Sigma]"]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox["\[ExponentialE]", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Sigma]"]]}]}], ")"}], 
      RowBox[{"n", "-", "r"}]], " ", 
     RowBox[{"n", "!"}]}], 
    RowBox[{"\[Sigma]", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "-", "r"}], ")"}], "!"}], " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "r"}], ")"}], "!"}]}]], ",", 
   FractionBox[
    RowBox[{
     SuperscriptBox["2", 
      RowBox[{
       RowBox[{"-", "1"}], "-", "n", "+", "r"}]], " ", 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", "n", "-", "r"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "x"}], "+", "\[Mu]"}], ")"}]}], "\[Sigma]"]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox["\[ExponentialE]", 
          FractionBox[
           RowBox[{
            RowBox[{"-", "x"}], "+", "\[Mu]"}], "\[Sigma]"]]}]}], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "r"}]], " ", 
     RowBox[{"n", "!"}]}], 
    RowBox[{"\[Sigma]", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "-", "r"}], ")"}], "!"}], " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "r"}], ")"}], "!"}]}]]}], "]"}]], "Output",
 CellChangeTimes->{3.588557881486807*^9, 3.5885579678194203`*^9, 
  3.6149953356688323`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
CellGrouping->Manual,
WindowSize->{1272, 843},
WindowMargins->{{22, Automatic}, {28, Automatic}},
PrivateNotebookOptions->{"VersionedStylesheet"->{"Default.nb"[8.] -> False}},
Magnification->1.5,
FrontEndVersion->"10.3 for Microsoft Windows (64-bit) (October 9, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 87, 1, 45, "Text"],
Cell[635, 23, 3120, 97, 168, "Text"],
Cell[3758, 122, 364, 12, 32, "TableLabel"],
Cell[4125, 136, 341, 11, 73, "Input"],
Cell[CellGroupData[{
Cell[4491, 151, 104, 2, 45, "Input"],
Cell[4598, 155, 12294, 209, 382, "Output"]
}, Open  ]],
Cell[16907, 367, 89, 2, 45, "Text"],
Cell[CellGroupData[{
Cell[17021, 373, 80, 2, 45, "Input"],
Cell[17104, 377, 1751, 51, 113, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18892, 433, 82, 2, 67, "Input"],
Cell[18977, 437, 113, 2, 97, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19127, 444, 79, 2, 67, "Input"],
Cell[19209, 448, 114, 2, 97, "Output"]
}, Open  ]],
Cell[19338, 453, 353, 16, 70, "Text"],
Cell[CellGroupData[{
Cell[19716, 473, 148, 5, 112, "Input"],
Cell[19867, 480, 213, 6, 76, "Message"],
Cell[20083, 488, 309, 9, 126, "Output"]
}, Open  ]],
Cell[20407, 500, 650, 24, 117, "IndentText"],
Cell[CellGroupData[{
Cell[21082, 528, 176, 5, 90, "Input"],
Cell[21261, 535, 204, 6, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21502, 546, 217, 6, 90, "Input"],
Cell[21722, 554, 149, 3, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21908, 562, 64, 1, 67, "Input"],
Cell[21975, 565, 6738, 117, 576, "Output"]
}, Open  ]],
Cell[28728, 685, 144, 3, 67, "Text"],
Cell[28875, 690, 1385, 42, 222, "Input"],
Cell[CellGroupData[{
Cell[30285, 736, 282, 8, 67, "Input"],
Cell[30570, 746, 43578, 749, 687, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74185, 1500, 306, 9, 156, "Input"],
Cell[74494, 1511, 100, 1, 66, "Output"],
Cell[74597, 1514, 124, 2, 69, "Output"],
Cell[74724, 1518, 296, 8, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75057, 1531, 288, 8, 72, "Input"],
Cell[75348, 1541, 292, 8, 88, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75677, 1554, 580, 13, 199, "Input"],
Cell[76260, 1569, 145, 3, 100, "Output"],
Cell[76408, 1574, 831, 26, 103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77276, 1605, 1280, 36, 472, "Input"],
Cell[78559, 1643, 237, 7, 69, "Output"],
Cell[78799, 1652, 96, 1, 66, "Output"],
Cell[78898, 1655, 204, 6, 66, "Output"],
Cell[79105, 1663, 164, 4, 106, "Output"],
Cell[79272, 1669, 164, 4, 103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79473, 1678, 1100, 31, 156, "Input"],
Cell[80576, 1711, 336, 10, 66, "Output"],
Cell[80915, 1723, 381, 10, 66, "Output"]
}, Open  ]],
Cell[81311, 1736, 26, 0, 67, "Input"],
Cell[CellGroupData[{
Cell[81362, 1740, 214, 6, 67, "Input"],
Cell[81579, 1748, 2520, 52, 559, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84136, 1805, 639, 19, 334, "Input"],
Cell[84778, 1826, 2446, 68, 148, "Output"],
Cell[87227, 1896, 204, 6, 102, "Output"],
Cell[87434, 1904, 185, 5, 100, "Output"],
Cell[87622, 1911, 335, 11, 66, "Output"],
Cell[87960, 1924, 253, 8, 100, "Output"],
Cell[88216, 1934, 279, 9, 105, "Output"],
Cell[CellGroupData[{
Cell[88520, 1947, 1697, 41, 436, "Input"],
Cell[90220, 1990, 124, 2, 97, "Output"],
Cell[90347, 1994, 512, 16, 123, "Output"]
}, Open  ]],
Cell[90874, 2013, 1373, 41, 157, "Input"],
Cell[CellGroupData[{
Cell[92272, 2058, 660, 18, 156, "Input"],
Cell[92935, 2078, 88463, 1439, 696, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181435, 3522, 787, 23, 286, "Input"],
Cell[182225, 3547, 2256, 65, 106, "Output"],
Cell[184484, 3614, 123, 2, 91, "Output"],
Cell[184610, 3618, 221, 7, 127, "Output"],
Cell[184834, 3627, 1629, 47, 100, "Output"],
Cell[186466, 3676, 283, 8, 73, "Message"],
Cell[186752, 3686, 2261, 65, 106, "Output"],
Cell[189016, 3753, 271, 8, 48, "Message"],
Cell[189290, 3763, 805, 28, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190132, 3796, 3826, 90, 739, "Input"],
Cell[193961, 3888, 2367, 45, 1264, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196365, 3938, 1287, 38, 162, "Input"],
Cell[197655, 3978, 1822, 35, 901, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199514, 4018, 1428, 42, 315, "Input"],
Cell[200945, 4062, 408, 12, 139, "Output"],
Cell[CellGroupData[{
Cell[201378, 4078, 1227, 34, 382, "Input"],
Cell[202608, 4114, 3289, 45, 697, "Output"],
Cell[205900, 4161, 139, 2, 66, "Output"],
Cell[206042, 4165, 4395, 79, 567, "Output"],
Cell[CellGroupData[{
Cell[210462, 4248, 3177, 92, 598, "Input"],
Cell[213642, 4342, 97, 1, 48, "Message"],
Cell[213742, 4345, 901, 27, 112, "Output"],
Cell[214646, 4374, 920, 29, 106, "Output"],
Cell[215569, 4405, 1716, 54, 118, "Output"],
Cell[217288, 4461, 827, 26, 118, "Output"],
Cell[218118, 4489, 1008, 33, 115, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219163, 4527, 2522, 73, 576, "Input"],
Cell[221688, 4602, 99, 1, 48, "Message"],
Cell[221790, 4605, 574, 18, 123, "Output"],
Cell[222367, 4625, 384, 12, 106, "Output"],
Cell[222754, 4639, 394, 13, 129, "Output"],
Cell[223151, 4654, 325, 10, 115, "Output"],
Cell[223479, 4666, 183, 4, 66, "Output"],
Cell[223665, 4672, 213, 6, 105, "Output"],
Cell[223881, 4680, 100, 1, 48, "Message"],
Cell[223984, 4683, 207, 5, 67, "Input"],
Cell[CellGroupData[{
Cell[224216, 4692, 696, 22, 211, "Input"],
Cell[224915, 4716, 711, 25, 109, "Output"],
Cell[225629, 4743, 3372, 98, 133, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229038, 4846, 2224, 61, 438, "Input"],
Cell[231265, 4909, 1998, 65, 133, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
